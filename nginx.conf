<<<<<<< HEAD
# /etc/nginx/nginx.conf
 
worker_processes 1;
 
events {
    worker_connections 1024;
}
 
=======
worker_processes 1;

events {
    worker_connections 1024;
}

>>>>>>> c4ad53d0f292fbd087929664e40ccff692fcc572
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
<<<<<<< HEAD
    keepalive_timeout  6500;
    client_max_body_size 0;
    # HTTP 서버 설정
    server {
        listen 3002;  # 로컬에서는 3002 포트 사용
        server_name localhost;
 
        # Next.js 서버로 프록시
        location / {
            proxy_pass http://nextjs:3000;  # Docker 네트워크 내의 서비스 이름 사용
=======
    keepalive_timeout 65;

    # 로컬 테스트용 서버 (포트 3002)
    server {
        listen 4000;
        server_name admin-test.local;

        # API 서버 프록시
        location ^~ /api {
            proxy_pass https://aistudio-dev.hell0world.net/api;
            proxy_http_version 1.1;
            proxy_set_header Host aistudio-dev.hell0world.net;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

       

    # ALB용 프로덕션 서버 (포트 80)
    server {
        listen 80;
        server_name aistudio.hell0world.net;

        # Next.js 서버 프록시 (관리자 페이지)
        location / {
            proxy_pass http://nextjs:4000;
>>>>>>> c4ad53d0f292fbd087929664e40ccff692fcc572
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
<<<<<<< HEAD
 
        # API 요청 리다이렉트
        location ^~ /api {
            # proxy_pass https://aistudio.hell0world.net/api;  # auth 서비스로 프록시
            proxy_pass https://aistudio-dev.hell0world.net/api;  # auth 서비스로 프록시
            proxy_ssl_verify off;
=======

        # API 서버 프록시
        location ^~ /api {
            proxy_pass https://aistudio-dev.hell0world.net/api;
>>>>>>> c4ad53d0f292fbd087929664e40ccff692fcc572
            proxy_http_version 1.1;
            proxy_set_header Host aistudio-dev.hell0world.net;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
<<<<<<< HEAD
            
            # 프록시 타임아웃 설정 (3분으로 설정 - Axios와 동일)
            proxy_connect_timeout 180s;
            proxy_send_timeout 180s;
            proxy_read_timeout 180s;
           
            # CORS 설정 추가
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
           
            # OPTIONS 메서드 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
=======

            # CORS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
>>>>>>> c4ad53d0f292fbd087929664e40ccff692fcc572
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
<<<<<<< HEAD
=======

    
>>>>>>> c4ad53d0f292fbd087929664e40ccff692fcc572
    }
}
