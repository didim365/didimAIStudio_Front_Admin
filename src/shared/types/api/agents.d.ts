/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/scenarios/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시나리오 데이터 목록 조회
         * @description 검색 조건에 따른 시나리오 원본 데이터 목록을 조회합니다.
         */
        get: operations["list_scenario_data_v1_scenarios_data_get"];
        put?: never;
        /**
         * 시나리오 데이터 생성
         * @description 새로운 시나리오 원본 데이터를 생성합니다.
         */
        post: operations["create_scenario_data_endpoint_v1_scenarios_data_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/scenarios/data/{scenario_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시나리오 데이터 조회
         * @description 특정 시나리오 원본 데이터를 조회합니다.
         */
        get: operations["get_scenario_data_endpoint_v1_scenarios_data__scenario_id__get"];
        /**
         * 시나리오 데이터 수정 (Upsert)
         * @description 시나리오 원본 데이터를 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_scenario_data_endpoint_v1_scenarios_data__scenario_id__put"];
        post?: never;
        /**
         * 시나리오 데이터 삭제
         * @description 시나리오 원본 데이터를 삭제합니다. 관련된 마이페이지 항목들도 함께 삭제됩니다.
         */
        delete: operations["delete_scenario_data_endpoint_v1_scenarios_data__scenario_id__delete"];
        options?: never;
        head?: never;
        /**
         * 시나리오 데이터 부분 수정
         * @description 시나리오 원본 데이터를 부분적으로 수정합니다.
         */
        patch: operations["patch_scenario_data_endpoint_v1_scenarios_data__scenario_id__patch"];
        trace?: never;
    };
    "/v1/scenarios/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 시나리오 목록 조회
         * @description 검색 조건에 따른 마이페이지 시나리오 목록을 조회합니다.
         */
        get: operations["list_my_page_scenarios_v1_scenarios_my_get"];
        put?: never;
        /**
         * 마이페이지에 시나리오 추가
         * @description 시나리오를 사용자 마이페이지에 추가합니다.
         */
        post: operations["add_scenario_to_my_page_endpoint_v1_scenarios_my_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/scenarios/my/{my_page_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 시나리오 조회
         * @description 특정 마이페이지 시나리오 항목을 조회합니다.
         */
        get: operations["get_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__get"];
        /**
         * 마이페이지 시나리오 수정 (Upsert)
         * @description 마이페이지 시나리오 항목을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__put"];
        post?: never;
        /**
         * 마이페이지에서 시나리오 제거
         * @description 마이페이지에서 특정 시나리오 항목을 제거합니다.
         */
        delete: operations["delete_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__delete"];
        options?: never;
        head?: never;
        /**
         * 마이페이지 시나리오 부분 수정
         * @description 마이페이지 시나리오 항목을 부분적으로 수정합니다.
         */
        patch: operations["patch_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__patch"];
        trace?: never;
    };
    "/v1/scenarios/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시나리오 역할 권한 목록 조회
         * @description 검색 조건에 따른 시나리오 역할 권한 목록을 조회합니다.
         */
        get: operations["list_scenario_roles_v1_scenarios_role_get"];
        put?: never;
        /**
         * 시나리오 역할 권한 생성
         * @description 새로운 시나리오 역할 권한을 생성합니다.
         */
        post: operations["create_scenario_role_endpoint_v1_scenarios_role_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/scenarios/role/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시나리오 역할 권한 조회
         * @description 특정 시나리오 역할 권한을 조회합니다.
         */
        get: operations["get_scenario_role_endpoint_v1_scenarios_role__role_id__get"];
        /**
         * 시나리오 역할 권한 수정 (Upsert)
         * @description 시나리오 역할 권한을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_scenario_role_endpoint_v1_scenarios_role__role_id__put"];
        post?: never;
        /**
         * 시나리오 역할 권한 삭제
         * @description 시나리오 역할 권한을 삭제합니다.
         */
        delete: operations["delete_scenario_role_endpoint_v1_scenarios_role__role_id__delete"];
        options?: never;
        head?: never;
        /**
         * 시나리오 역할 권한 부분 수정
         * @description 시나리오 역할 권한을 부분적으로 수정합니다.
         */
        patch: operations["patch_scenario_role_endpoint_v1_scenarios_role__role_id__patch"];
        trace?: never;
    };
    "/v1/personas/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * LLM을 이용한 페르소나 자동 생성
         * @description 사용자가 제공한 기본 정보를 바탕으로 LLM이 시스템 프롬프트를 자동 생성하여 새로운 페르소나를 등록합니다.
         */
        post: operations["generate_persona_with_agent_endpoint_v1_personas_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personas/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 데이터 목록 조회
         * @description 검색 조건에 따른 페르소나 원본 데이터 목록을 조회합니다.
         */
        get: operations["list_persona_data_v1_personas_data_get"];
        put?: never;
        /**
         * 페르소나 데이터 생성
         * @description 새로운 페르소나 원본 데이터를 생성합니다.
         */
        post: operations["create_persona_data_endpoint_v1_personas_data_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personas/data/{persona_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 데이터 조회
         * @description 특정 페르소나 원본 데이터를 조회합니다.
         */
        get: operations["get_persona_data_endpoint_v1_personas_data__persona_id__get"];
        /**
         * 페르소나 데이터 수정 (Upsert)
         * @description 페르소나 원본 데이터를 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_persona_data_endpoint_v1_personas_data__persona_id__put"];
        post?: never;
        /**
         * 페르소나 데이터 삭제
         * @description 페르소나 원본 데이터를 삭제합니다. 관련된 마이페이지 항목들도 함께 삭제됩니다.
         */
        delete: operations["delete_persona_data_endpoint_v1_personas_data__persona_id__delete"];
        options?: never;
        head?: never;
        /**
         * 페르소나 데이터 부분 수정
         * @description 페르소나 원본 데이터를 부분적으로 수정합니다.
         */
        patch: operations["patch_persona_data_endpoint_v1_personas_data__persona_id__patch"];
        trace?: never;
    };
    "/v1/personas/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 페르소나 목록 조회
         * @description 검색 조건에 따른 마이페이지 페르소나 목록을 조회합니다. 에이전트 및 시나리오 연결 정보를 포함합니다.
         */
        get: operations["list_my_page_personas_v1_personas_my_get"];
        put?: never;
        /**
         * 마이페이지에 페르소나 추가
         * @description 페르소나를 사용자 마이페이지에 추가합니다.
         */
        post: operations["add_persona_to_my_page_endpoint_v1_personas_my_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personas/my/{my_page_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 페르소나 조회
         * @description 특정 마이페이지 페르소나 항목을 조회합니다. 에이전트 및 시나리오 연결 정보를 포함합니다.
         */
        get: operations["get_my_page_persona_endpoint_v1_personas_my__my_page_id__get"];
        /**
         * 마이페이지 페르소나 수정 (Upsert)
         * @description 마이페이지 페르소나 항목을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_my_page_persona_endpoint_v1_personas_my__my_page_id__put"];
        post?: never;
        /**
         * 마이페이지에서 페르소나 제거
         * @description 마이페이지에서 특정 페르소나 항목을 제거합니다.
         */
        delete: operations["delete_my_page_persona_endpoint_v1_personas_my__my_page_id__delete"];
        options?: never;
        head?: never;
        /**
         * 마이페이지 페르소나 부분 수정
         * @description 마이페이지 페르소나 항목을 부분적으로 수정합니다.
         */
        patch: operations["patch_my_page_persona_endpoint_v1_personas_my__my_page_id__patch"];
        trace?: never;
    };
    "/v1/personas/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 역할 권한 목록 조회
         * @description 검색 조건에 따른 페르소나 역할 권한 목록을 조회합니다.
         */
        get: operations["list_persona_roles_v1_personas_role_get"];
        put?: never;
        /**
         * 페르소나 역할 권한 생성
         * @description 새로운 페르소나 역할 권한을 생성합니다.
         */
        post: operations["create_persona_role_endpoint_v1_personas_role_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personas/role/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 역할 권한 조회
         * @description 특정 페르소나 역할 권한을 조회합니다.
         */
        get: operations["get_persona_role_endpoint_v1_personas_role__role_id__get"];
        /**
         * 페르소나 역할 권한 수정 (Upsert)
         * @description 페르소나 역할 권한을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_persona_role_endpoint_v1_personas_role__role_id__put"];
        post?: never;
        /**
         * 페르소나 역할 권한 삭제
         * @description 페르소나 역할 권한을 삭제합니다.
         */
        delete: operations["delete_persona_role_endpoint_v1_personas_role__role_id__delete"];
        options?: never;
        head?: never;
        /**
         * 페르소나 역할 권한 부분 수정
         * @description 페르소나 역할 권한을 부분적으로 수정합니다.
         */
        patch: operations["patch_persona_role_endpoint_v1_personas_role__role_id__patch"];
        trace?: never;
    };
    "/v1/personas/runtime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 런타임 목록 조회
         * @description 검색 조건에 따른 페르소나 런타임 목록을 조회합니다.
         */
        get: operations["list_persona_runtime_v1_personas_runtime_get"];
        put?: never;
        /**
         * 페르소나 런타임 생성
         * @description 새로운 페르소나 런타임을 생성합니다.
         */
        post: operations["create_persona_runtime_endpoint_v1_personas_runtime_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personas/runtime/{runtime_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 런타임 조회
         * @description 특정 페르소나 런타임을 조회합니다.
         */
        get: operations["get_persona_runtime_endpoint_v1_personas_runtime__runtime_id__get"];
        /**
         * 페르소나 런타임 수정 (Upsert)
         * @description 페르소나 런타임을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_persona_runtime_endpoint_v1_personas_runtime__runtime_id__put"];
        post?: never;
        /**
         * 페르소나 런타임 삭제
         * @description 페르소나 런타임을 삭제합니다.
         */
        delete: operations["delete_persona_runtime_endpoint_v1_personas_runtime__runtime_id__delete"];
        options?: never;
        head?: never;
        /**
         * 페르소나 런타임 부분 수정
         * @description 페르소나 런타임을 부분적으로 수정합니다.
         */
        patch: operations["patch_persona_runtime_endpoint_v1_personas_runtime__runtime_id__patch"];
        trace?: never;
    };
    "/v1/personas/data-runtime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 데이터-런타임 매핑 목록 조회
         * @description 검색 조건에 따른 페르소나 데이터-런타임 매핑 목록을 조회합니다.
         */
        get: operations["list_persona_data_runtime_v1_personas_data_runtime_get"];
        put?: never;
        /**
         * 페르소나 데이터-런타임 매핑 생성
         * @description 새로운 페르소나 데이터-런타임 매핑을 생성합니다.
         */
        post: operations["create_persona_data_runtime_endpoint_v1_personas_data_runtime_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personas/data-runtime/{data_runtime_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 데이터-런타임 매핑 조회
         * @description 특정 페르소나 데이터-런타임 매핑을 조회합니다.
         */
        get: operations["get_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__get"];
        /**
         * 페르소나 데이터-런타임 매핑 수정 (Upsert)
         * @description 페르소나 데이터-런타임 매핑을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__put"];
        post?: never;
        /**
         * 페르소나 데이터-런타임 매핑 삭제
         * @description 페르소나 데이터-런타임 매핑을 삭제합니다.
         */
        delete: operations["delete_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__delete"];
        options?: never;
        head?: never;
        /**
         * 페르소나 데이터-런타임 매핑 부분 수정
         * @description 페르소나 데이터-런타임 매핑을 부분적으로 수정합니다.
         */
        patch: operations["patch_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__patch"];
        trace?: never;
    };
    "/v1/personas/model": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 모델 목록 조회
         * @description 검색 조건에 따른 페르소나 모델 목록을 조회합니다.
         */
        get: operations["list_persona_models_v1_personas_model_get"];
        put?: never;
        /**
         * 페르소나 모델 생성
         * @description 새로운 페르소나 모델을 생성합니다.
         */
        post: operations["create_persona_model_endpoint_v1_personas_model_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personas/model/{model_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 페르소나 모델 조회
         * @description 특정 페르소나 모델을 조회합니다.
         */
        get: operations["get_persona_model_endpoint_v1_personas_model__model_id__get"];
        /**
         * 페르소나 모델 수정 (Upsert)
         * @description 페르소나 모델을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_persona_model_endpoint_v1_personas_model__model_id__put"];
        post?: never;
        /**
         * 페르소나 모델 삭제
         * @description 페르소나 모델을 삭제합니다.
         */
        delete: operations["delete_persona_model_endpoint_v1_personas_model__model_id__delete"];
        options?: never;
        head?: never;
        /**
         * 페르소나 모델 부분 수정
         * @description 페르소나 모델을 부분적으로 수정합니다.
         */
        patch: operations["patch_persona_model_endpoint_v1_personas_model__model_id__patch"];
        trace?: never;
    };
    "/v1/agents/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 에이전트 데이터 목록 조회
         * @description 검색 조건에 따른 에이전트 원본 데이터 목록을 조회합니다.
         */
        get: operations["list_agent_data_v1_agents_data_get"];
        put?: never;
        /**
         * 에이전트 데이터 생성
         * @description 새로운 에이전트 원본 데이터를 생성합니다.
         */
        post: operations["create_agent_data_endpoint_v1_agents_data_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/data/{agent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 에이전트 데이터 조회
         * @description 특정 에이전트 원본 데이터를 조회합니다.
         */
        get: operations["get_agent_data_endpoint_v1_agents_data__agent_id__get"];
        /**
         * 에이전트 데이터 수정 (Upsert)
         * @description 에이전트 원본 데이터를 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_agent_data_endpoint_v1_agents_data__agent_id__put"];
        post?: never;
        /**
         * 에이전트 데이터 삭제
         * @description 에이전트 원본 데이터를 삭제합니다. 관련된 마이페이지 항목들도 함께 삭제됩니다.
         */
        delete: operations["delete_agent_data_endpoint_v1_agents_data__agent_id__delete"];
        options?: never;
        head?: never;
        /**
         * 에이전트 데이터 부분 수정
         * @description 에이전트 원본 데이터를 부분적으로 수정합니다.
         */
        patch: operations["patch_agent_data_endpoint_v1_agents_data__agent_id__patch"];
        trace?: never;
    };
    "/v1/agents/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 에이전트 목록 조회
         * @description 검색 조건에 따른 마이페이지 에이전트 목록을 조회합니다.
         */
        get: operations["list_my_page_agents_v1_agents_my_get"];
        put?: never;
        /**
         * 마이페이지에 에이전트 추가
         * @description 에이전트를 사용자 마이페이지에 추가합니다.
         */
        post: operations["add_agent_to_my_page_endpoint_v1_agents_my_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/my/{my_page_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 에이전트 조회
         * @description 특정 마이페이지 에이전트 항목을 조회합니다.
         */
        get: operations["get_my_page_agent_endpoint_v1_agents_my__my_page_id__get"];
        /**
         * 마이페이지 에이전트 수정 (Upsert)
         * @description 마이페이지 에이전트 항목을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_my_page_agent_endpoint_v1_agents_my__my_page_id__put"];
        post?: never;
        /**
         * 마이페이지에서 에이전트 제거
         * @description 마이페이지에서 특정 에이전트 항목을 제거합니다.
         */
        delete: operations["delete_my_page_agent_endpoint_v1_agents_my__my_page_id__delete"];
        options?: never;
        head?: never;
        /**
         * 마이페이지 에이전트 부분 수정
         * @description 마이페이지 에이전트 항목을 부분적으로 수정합니다.
         */
        patch: operations["patch_my_page_agent_endpoint_v1_agents_my__my_page_id__patch"];
        trace?: never;
    };
    "/v1/agents/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 에이전트 역할 권한 목록 조회
         * @description 검색 조건에 따른 에이전트 역할 권한 목록을 조회합니다.
         */
        get: operations["list_agent_roles_v1_agents_role_get"];
        put?: never;
        /**
         * 에이전트 역할 권한 생성
         * @description 새로운 에이전트 역할 권한을 생성합니다.
         */
        post: operations["create_agent_role_endpoint_v1_agents_role_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/role/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 에이전트 역할 권한 조회
         * @description 특정 에이전트 역할 권한을 조회합니다.
         */
        get: operations["get_agent_role_endpoint_v1_agents_role__role_id__get"];
        /**
         * 에이전트 역할 권한 수정 (Upsert)
         * @description 에이전트 역할 권한을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_agent_role_endpoint_v1_agents_role__role_id__put"];
        post?: never;
        /**
         * 에이전트 역할 권한 삭제
         * @description 에이전트 역할 권한을 삭제합니다.
         */
        delete: operations["delete_agent_role_endpoint_v1_agents_role__role_id__delete"];
        options?: never;
        head?: never;
        /**
         * 에이전트 역할 권한 부분 수정
         * @description 에이전트 역할 권한을 부분적으로 수정합니다.
         */
        patch: operations["patch_agent_role_endpoint_v1_agents_role__role_id__patch"];
        trace?: never;
    };
    "/v1/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 노드 목록 조회
         * @description 조건부 필터링을 통한 노드 목록을 조회합니다. 결과는 항상 {user_id, agt_scenarios_data_id, nodes: []} 구조입니다.
         */
        get: operations["list_nodes_v1_nodes_get"];
        put?: never;
        /**
         * 노드 생성
         * @description 실제 입력 구조 {user_id, agt_scenarios_data_id, nodes: []} 로 노드를 생성합니다.
         */
        post: operations["create_nodes_endpoint_v1_nodes_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/nodes/{node_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 단일 노드 조회
         * @description agt_node_data 테이블의 PK ID로 단일 노드를 조회합니다. 결과는 {user_id, agt_scenarios_data_id, nodes: [해당노드]} 형태입니다.
         */
        get: operations["get_node_endpoint_v1_nodes__node_id__get"];
        /**
         * 단일 노드 교체
         * @description agt_node_data 테이블의 PK ID로 단일 노드를 교체합니다. 입력은 {user_id, agt_scenarios_data_id, nodes: [새로운노드]} 형태입니다.
         */
        put: operations["replace_node_endpoint_v1_nodes__node_id__put"];
        post?: never;
        /**
         * 단일 노드 삭제
         * @description agt_node_data 테이블의 PK ID로 단일 노드를 삭제합니다.
         */
        delete: operations["delete_node_endpoint_v1_nodes__node_id__delete"];
        options?: never;
        head?: never;
        /**
         * 단일 노드 부분 수정
         * @description agt_node_data 테이블의 PK ID로 단일 노드를 부분 수정합니다. 입력은 {nodes: [수정할노드]} 형태입니다.
         */
        patch: operations["update_node_endpoint_v1_nodes__node_id__patch"];
        trace?: never;
    };
    "/v1/nodes/scenario/{agt_scenarios_data_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 시나리오 전체 노드 교체
         * @description 특정 시나리오의 모든 노드를 삭제하고 새로운 노드들로 교체합니다.
         */
        put: operations["replace_nodes_by_scenario_endpoint_v1_nodes_scenario__agt_scenarios_data_id__put"];
        post?: never;
        /**
         * 시나리오 전체 노드 삭제
         * @description 특정 시나리오의 모든 노드를 삭제합니다.
         */
        delete: operations["delete_nodes_by_scenario_endpoint_v1_nodes_scenario__agt_scenarios_data_id__delete"];
        options?: never;
        head?: never;
        /**
         * 시나리오 전체 노드 수정 (Upsert)
         * @description 특정 시나리오의 노드들을 업데이트하거나 새로 추가합니다 (Upsert).
         */
        patch: operations["update_nodes_by_scenario_endpoint_v1_nodes_scenario__agt_scenarios_data_id__patch"];
        trace?: never;
    };
    "/v1/nodes/scenario/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 노드 목록 조회
         * @description 마이페이지 기반으로 노드 목록을 조회합니다. 필터링 및 페이지네이션을 지원합니다.
         */
        get: operations["list_nodes_my_page_v1_nodes_scenario_my_get"];
        put?: never;
        /**
         * 마이페이지 노드 생성
         * @description 마이페이지 ID 기반으로 노드를 생성합니다.
         */
        post: operations["create_nodes_my_page_v1_nodes_scenario_my_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/nodes/scenario/my/{scenario_my_page_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 마이페이지 노드 전체 교체
         * @description 마이페이지 ID 기반으로 모든 노드를 교체합니다.
         */
        put: operations["replace_nodes_my_page_v1_nodes_scenario_my__scenario_my_page_id__put"];
        post?: never;
        /**
         * 마이페이지 노드 삭제
         * @description 마이페이지 ID 기반으로 노드를 삭제합니다.
         */
        delete: operations["delete_nodes_my_page_v1_nodes_scenario_my__scenario_my_page_id__delete"];
        options?: never;
        head?: never;
        /**
         * 마이페이지 노드 부분 수정
         * @description 마이페이지 ID 기반으로 노드를 부분 수정합니다.
         */
        patch: operations["update_nodes_my_page_v1_nodes_scenario_my__scenario_my_page_id__patch"];
        trace?: never;
    };
    "/v1/edges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * search edges
         * @description 조건부 필터링 및 페이지네이션을 통해 엣지 목록을 조회합니다.
         */
        get: operations["list_edges_v1_edges_get"];
        put?: never;
        /**
         * create edges
         * @description 엣지를 생성합니다. 입력: {user_id, agt_scenarios_data_id, edges: []}, 출력: 동일한 구조
         */
        post: operations["create_edges_endpoint_v1_edges_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/edges/{edge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get edge by id
         * @description PK ID로 단일 엣지를 조회합니다. 출력: {user_id, agt_scenarios_data_id, edges: [해당엣지]}
         */
        get: operations["get_edge_endpoint_v1_edges__edge_id__get"];
        /**
         * upsert edge by id
         * @description PK ID로 단일 엣지를 전체 교체합니다. 입력: {user_id, agt_scenarios_data_id, edges: [새로운엣지]}, 출력: 동일한 구조
         */
        put: operations["upsert_edge_endpoint_v1_edges__edge_id__put"];
        post?: never;
        /**
         * delete edge by id
         * @description PK ID로 단일 엣지를 삭제합니다.
         */
        delete: operations["delete_edge_endpoint_v1_edges__edge_id__delete"];
        options?: never;
        head?: never;
        /**
         * update edge by id
         * @description PK ID로 단일 엣지를 부분 수정합니다. 입력: {edges: [수정할엣지]}, 출력: {user_id, agt_scenarios_data_id, edges: [수정된엣지]}
         */
        patch: operations["update_edge_endpoint_v1_edges__edge_id__patch"];
        trace?: never;
    };
    "/v1/edges/scenario/{agt_scenarios_data_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 시나리오 전체 엣지 교체
         * @description 특정 시나리오의 모든 엣지를 삭제하고 새로운 엣지들로 교체합니다.
         */
        put: operations["replace_edges_by_scenario_endpoint_v1_edges_scenario__agt_scenarios_data_id__put"];
        post?: never;
        /**
         * 시나리오 전체 엣지 삭제
         * @description 특정 시나리오의 모든 엣지를 삭제합니다.
         */
        delete: operations["delete_edges_by_scenario_endpoint_v1_edges_scenario__agt_scenarios_data_id__delete"];
        options?: never;
        head?: never;
        /**
         * 시나리오 전체 엣지 수정 (Upsert)
         * @description 특정 시나리오의 엣지들을 업데이트하거나 새로 추가합니다 (Upsert).
         */
        patch: operations["update_edges_by_scenario_endpoint_v1_edges_scenario__agt_scenarios_data_id__patch"];
        trace?: never;
    };
    "/v1/edges/scenario/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 엣지 목록 조회
         * @description 마이페이지 기반으로 엣지 목록을 조회합니다. 필터링 및 페이지네이션을 지원합니다.
         */
        get: operations["list_edges_my_page_v1_edges_scenario_my_get"];
        put?: never;
        /**
         * 마이페이지 엣지 생성
         * @description 마이페이지 ID 기반으로 엣지를 생성합니다.
         */
        post: operations["create_edges_my_page_v1_edges_scenario_my_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/edges/scenario/my/{scenario_my_page_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 마이페이지 엣지 전체 교체
         * @description 마이페이지 ID 기반으로 모든 엣지를 교체합니다.
         */
        put: operations["replace_edges_my_page_v1_edges_scenario_my__scenario_my_page_id__put"];
        post?: never;
        /**
         * 마이페이지 엣지 삭제
         * @description 마이페이지 ID 기반으로 엣지를 삭제합니다.
         */
        delete: operations["delete_edges_my_page_v1_edges_scenario_my__scenario_my_page_id__delete"];
        options?: never;
        head?: never;
        /**
         * 마이페이지 엣지 부분 수정
         * @description 마이페이지 ID 기반으로 엣지를 부분 수정합니다.
         */
        patch: operations["update_edges_my_page_v1_edges_scenario_my__scenario_my_page_id__patch"];
        trace?: never;
    };
    "/v1/graphs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [Deprecated] 그래프 목록 조회
         * @description [Deprecated] JIT 방식으로 변경되어 더 이상 저장된 그래프를 조회하지 않습니다.
         */
        get: operations["list_graphs_api_v1_graphs__get"];
        put?: never;
        /**
         * 스테이트그래프 테스트 생성
         * @description 스테이트그래프를 테스트로 생성합니다 (저장하지 않음). 실제 사용은 invoke/sse/websocket API에서 JIT로 처리됩니다.
         */
        post: operations["create_graph_api_v1_graphs__post"];
        /**
         * [Deprecated] 그래프 삭제
         * @description [Deprecated] JIT 방식으로 변경되어 삭제할 그래프가 메모리에 없습니다.
         */
        delete: operations["delete_graph_api_v1_graphs__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/websocket-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * WebSocketKey 목록 조회 및 필터링
         * @description WebSocketKey 목록을 조회하고 다양한 조건으로 필터링합니다.
         */
        get: operations["search_websocket_keys_endpoint_v1_websocket_keys_get"];
        put?: never;
        /**
         * 새로운 WebSocketKey 생성
         * @description user_id와 scenario_my_page_id를 기반으로 항상 새로운 WebSocketKey를 생성합니다. thread_id와 qa_id는 내부적으로 고유하게 생성됩니다.
         */
        post: operations["create_websocket_key_endpoint_v1_websocket_keys_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/websocket-keys/with-thread-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 새로운 WebSocketKey 생성 (thread_id 제공)
         * @description user_id, scenario_my_page_id, thread_id를 기반으로 항상 새로운 WebSocketKey를 생성합니다. qa_id는 내부적으로 고유하게 생성됩니다.
         */
        post: operations["create_websocket_key_with_thread_id_endpoint_v1_websocket_keys_with_thread_id_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/websocket-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ID로 WebSocketKey 조회
         * @description 특정 ID로 WebSocketKey 정보를 조회합니다.
         */
        get: operations["get_websocket_key_endpoint_v1_websocket_keys__id__get"];
        /**
         * WebSocketKey 전체 수정
         * @description ID로 특정 WebSocketKey 정보를 전체 수정합니다.
         */
        put: operations["update_websocket_key_endpoint_v1_websocket_keys__id__put"];
        post?: never;
        /**
         * WebSocketKey 삭제
         * @description 특정 ID의 WebSocketKey를 삭제합니다.
         */
        delete: operations["delete_websocket_key_endpoint_v1_websocket_keys__id__delete"];
        options?: never;
        head?: never;
        /**
         * WebSocketKey 부분 수정
         * @description ID로 특정 WebSocketKey 정보를 부분적으로 수정합니다.
         */
        patch: operations["patch_websocket_key_endpoint_v1_websocket_keys__id__patch"];
        trace?: never;
    };
    "/v1/titles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 제목 목록 조회 및 필터링
         * @description 제목 목록을 조회하고 다양한 조건으로 필터링합니다. thread_id, qa_id는 Text로 처리됩니다.
         */
        get: operations["search_titles_endpoint_v1_titles_get"];
        put?: never;
        /**
         * 질문으로부터 제목 생성 및 저장
         * @description 질문을 받아 LLM으로 제목을 생성하고, DB에 저장합니다. thread_id, qa_id는 Text로 처리됩니다.
         */
        post: operations["create_title_endpoint_v1_titles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/titles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ID로 제목 조회
         * @description 특정 ID로 제목 정보를 조회합니다.
         */
        get: operations["get_title_endpoint_v1_titles__id__get"];
        /**
         * 제목 전체 수정
         * @description ID로 특정 제목 정보를 전체 수정합니다. thread_id, qa_id는 Text로 처리됩니다.
         */
        put: operations["update_title_endpoint_v1_titles__id__put"];
        post?: never;
        /**
         * 제목 삭제
         * @description 특정 ID의 제목을 삭제합니다.
         */
        delete: operations["delete_title_endpoint_v1_titles__id__delete"];
        options?: never;
        head?: never;
        /**
         * 제목 부분 수정 (title만)
         * @description id로 특정 title의 제목만 부분적으로 수정합니다.
         */
        patch: operations["patch_title_endpoint_v1_titles__id__patch"];
        trace?: never;
    };
    "/v1/invoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 에이전트에 메시지 전송 및 응답 반환
         * @description 에이전트에 메시지를 전송하고 생성된 응답을 한 번에 반환합니다.
         */
        post: operations["invoke_agent_v1_invoke_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoke/sse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * SSE 스트리밍으로 에이전트 실행
         * @description Server-Sent Events를 통해 에이전트 실행 과정을 실시간으로 스트리밍합니다.
         */
        post: operations["invoke_agent_sse_v1_invoke_sse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 대화 히스토리 목록 조회 및 필터링
         * @description 대화 히스토리 목록을 조회하고 다양한 조건으로 필터링합니다.
         */
        get: operations["search_histories_endpoint_v1_histories_get"];
        put?: never;
        /**
         * 히스토리 수동 생성
         * @description 히스토리를 수동으로 생성합니다.
         */
        post: operations["create_history_endpoint_v1_histories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/histories/memory_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 히스토리 메모리 설정 목록 조회
         * @description 히스토리 메모리 설정 목록을 조회하고 필터링합니다.
         */
        get: operations["get_memory_configs_v1_histories_memory_config_get"];
        put?: never;
        /**
         * 히스토리 메모리 설정 생성
         * @description 새로운 히스토리 메모리 설정을 생성합니다.
         */
        post: operations["create_memory_config_v1_histories_memory_config_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/histories/memory_config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ID로 히스토리 메모리 설정 조회
         * @description 특정 ID로 히스토리 메모리 설정을 조회합니다.
         */
        get: operations["get_memory_config_v1_histories_memory_config__id__get"];
        /**
         * 히스토리 메모리 설정 수정 (Upsert)
         * @description 히스토리 메모리 설정을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_memory_config_v1_histories_memory_config__id__put"];
        post?: never;
        /**
         * 히스토리 메모리 설정 삭제
         * @description 특정 ID의 히스토리 메모리 설정을 삭제합니다.
         */
        delete: operations["delete_memory_config_v1_histories_memory_config__id__delete"];
        options?: never;
        head?: never;
        /**
         * 히스토리 메모리 설정 부분 수정
         * @description 히스토리 메모리 설정을 부분적으로 수정합니다.
         */
        patch: operations["update_memory_config_v1_histories_memory_config__id__patch"];
        trace?: never;
    };
    "/v1/histories/relationship": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 히스토리 메모리 시나리오 연결 목록 조회
         * @description 히스토리 메모리 시나리오 연결 목록을 조회하고 필터링합니다.
         */
        get: operations["get_memory_scenario_relationships_v1_histories_relationship_get"];
        put?: never;
        /**
         * 히스토리 메모리 시나리오 연결 생성
         * @description 새로운 히스토리 메모리 시나리오 연결을 생성합니다.
         */
        post: operations["create_memory_scenario_relationship_v1_histories_relationship_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/histories/relationship/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ID로 히스토리 메모리 시나리오 연결 조회
         * @description 특정 ID로 히스토리 메모리 시나리오 연결을 조회합니다.
         */
        get: operations["get_memory_scenario_relationship_v1_histories_relationship__id__get"];
        /**
         * 히스토리 메모리 시나리오 연결 수정 (Upsert)
         * @description 히스토리 메모리 시나리오 연결을 수정합니다. 존재하지 않으면 새로 생성합니다.
         */
        put: operations["upsert_memory_scenario_relationship_v1_histories_relationship__id__put"];
        post?: never;
        /**
         * 히스토리 메모리 시나리오 연결 삭제
         * @description 특정 ID의 히스토리 메모리 시나리오 연결을 삭제합니다.
         */
        delete: operations["delete_memory_scenario_relationship_v1_histories_relationship__id__delete"];
        options?: never;
        head?: never;
        /**
         * 히스토리 메모리 시나리오 연결 부분 수정
         * @description 히스토리 메모리 시나리오 연결을 부분적으로 수정합니다.
         */
        patch: operations["update_memory_scenario_relationship_v1_histories_relationship__id__patch"];
        trace?: never;
    };
    "/v1/histories/thread/{user_id}/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 스레드 히스토리 조회
         * @description 특정 사용자 및 스레드의 모든 히스토리를 조회합니다.
         */
        get: operations["get_thread_histories_endpoint_v1_histories_thread__user_id___thread_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/histories/thread/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 스레드 ID로 히스토리 및 관련 데이터 삭제
         * @description 특정 thread_id의 모든 히스토리와 관련 chatting 데이터를 삭제합니다. (agents.agt_history_data, chatting.checkpoints, chatting.checkpoint_writes, chatting.checkpoint_blobs)
         */
        delete: operations["delete_histories_by_thread_id_endpoint_v1_histories_thread__thread_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/histories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ID로 히스토리 조회
         * @description 특정 ID로 히스토리 정보를 조회합니다.
         */
        get: operations["get_history_endpoint_v1_histories__id__get"];
        put?: never;
        post?: never;
        /**
         * 히스토리 삭제
         * @description 특정 ID의 히스토리를 삭제합니다.
         */
        delete: operations["delete_history_endpoint_v1_histories__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/histories/{id}/answer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 히스토리 답변 업데이트
         * @description ID로 특정 히스토리의 답변을 업데이트합니다.
         */
        patch: operations["update_history_answer_endpoint_v1_histories__id__answer_patch"];
        trace?: never;
    };
    "/v1/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 에이전트의 대화 기록 목록 및 검색
         * @description 필터, 정렬, 페이징을 지원하는 에이전트의 대화 기록 목록 조회 API (토큰 사용량 요약 포함)
         */
        get: operations["search_chats_endpoint_v1_chats_get"];
        put?: never;
        /**
         * 에이전트의 대화 기록 생성
         * @description user_id, scenario_my_page_id, thread_id, qa_id로 에이전트의 대화 기록을 생성합니다. (토큰 사용량 요약 및 성능 메트릭 자동 포함)
         */
        post: operations["create_chat_endpoint_v1_chats_post"];
        /**
         * 에이전트의 대화 기록 삭제
         * @description user_id, scenario_my_page_id, thread_id, qa_id로 에이전트의 대화 기록을 삭제합니다.
         */
        delete: operations["delete_chat_endpoint_v1_chats_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/usage/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모델별 사용량 통계 조회 (GET)
         * @description 특정 기간 동안의 모델별 토큰 사용량과 비용을 조회합니다. (GET 방식)
         */
        get: operations["get_model_usage_get_v1_dashboard_usage_models_get"];
        put?: never;
        /**
         * 모델별 사용량 통계 조회
         * @description 특정 기간 동안의 모델별 토큰 사용량과 비용을 조회합니다.
         */
        post: operations["get_model_usage_v1_dashboard_usage_models_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/usages/agents/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 에이전트별 사용량 통계 조회 (GET)
         * @description 특정 기간 동안의 에이전트별 토큰 사용량과 요청 통계를 조회합니다. (GET 방식)
         */
        get: operations["get_agent_usage_statistics_get_v1_dashboard_usages_agents_statistics_get"];
        put?: never;
        /**
         * 에이전트별 사용량 통계 조회
         * @description 특정 기간 동안의 에이전트별 토큰 사용량과 요청 통계를 조회합니다.
         */
        post: operations["get_agent_usage_statistics_post_v1_dashboard_usages_agents_statistics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/scenarios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시나리오별 토큰 사용량 통계 조회 (GET)
         * @description 특정 기간 동안의 시나리오별 토큰 사용량을 조회합니다. (GET 방식) | 이전 사용 엔드포인트: /v1/tokens/stats
         */
        get: operations["get_scenario_usage_get_v1_dashboard_scenarios_get"];
        put?: never;
        /**
         * 시나리오별 토큰 사용량 통계 조회
         * @description 특정 기간 동안의 시나리오별 토큰 사용량을 조회합니다. | 이전 사용 엔드포인트: /v1/tokens/stats
         */
        post: operations["get_scenario_usage_v1_dashboard_scenarios_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 메모리 설정 목록 조회 (간소화)
         * @description 간소화된 메모리 설정 목록을 조회합니다.
         */
        get: operations["search_memory_settings_endpoint_v1_memory_setting_get"];
        put?: never;
        /**
         * 메모리 설정 생성 (간소화)
         * @description 간소화된 메모리 설정을 생성합니다.
         */
        post: operations["create_memory_setting_endpoint_v1_memory_setting_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/setting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ID로 메모리 설정 조회
         * @description 특정 ID로 메모리 설정 정보를 조회합니다.
         */
        get: operations["get_memory_setting_endpoint_v1_memory_setting__id__get"];
        /**
         * 메모리 설정 전체 수정
         * @description ID로 특정 메모리 설정 정보를 전체 수정합니다.
         */
        put: operations["update_memory_setting_endpoint_v1_memory_setting__id__put"];
        post?: never;
        /**
         * 메모리 설정 삭제
         * @description 특정 ID의 메모리 설정을 삭제합니다.
         */
        delete: operations["delete_memory_setting_endpoint_v1_memory_setting__id__delete"];
        options?: never;
        head?: never;
        /**
         * 메모리 설정 부분 수정
         * @description ID로 특정 메모리 설정을 부분적으로 수정합니다.
         */
        patch: operations["patch_memory_setting_endpoint_v1_memory_setting__id__patch"];
        trace?: never;
    };
    "/v1/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API 권한 목록 조회 및 필터링
         * @description API 권한 목록을 조회하고 다양한 조건으로 필터링합니다.
         */
        get: operations["search_permissions_endpoint_v1_permissions_get"];
        put?: never;
        /**
         * API 권한 생성
         * @description 새로운 API 권한 정보를 생성합니다.
         */
        post: operations["create_permission_endpoint_v1_permissions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/permissions/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 권한 캐시 갱신
         * @description 모든 API 권한 캐시를 갱신합니다.
         */
        post: operations["refresh_permissions_endpoint_v1_permissions_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/permissions/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 권한 서비스 상태 확인
         * @description 권한 서비스의 상태를 확인합니다.
         */
        get: operations["health_check_endpoint_v1_permissions_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/permissions/check/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 경로의 권한 확인
         * @description 특정 API 경로와 메서드에 대한 권한 정보를 확인합니다.
         */
        get: operations["check_permission_endpoint_v1_permissions_check__path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/permissions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ID로 API 권한 조회
         * @description 특정 ID로 API 권한 정보를 조회합니다.
         */
        get: operations["get_permission_endpoint_v1_permissions__id__get"];
        /**
         * API 권한 전체 수정
         * @description ID로 특정 API 권한 정보를 전체 수정합니다.
         */
        put: operations["update_permission_endpoint_v1_permissions__id__put"];
        post?: never;
        /**
         * API 권한 삭제
         * @description 특정 ID의 API 권한을 삭제합니다.
         */
        delete: operations["delete_permission_endpoint_v1_permissions__id__delete"];
        options?: never;
        head?: never;
        /**
         * API 권한 부분 수정
         * @description ID로 특정 API 권한을 부분적으로 수정합니다.
         */
        patch: operations["patch_permission_endpoint_v1_permissions__id__patch"];
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 루트 엔드포인트
         * @description API 상태 메시지를 반환합니다.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 헬스 체크
         * @description 애플리케이션 상태가 정상인지 확인합니다.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버전 정보
         * @description 애플리케이션 버전 정보를 반환합니다.
         */
        get: operations["get_version_version_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ActionType
         * @enum {string}
         */
        ActionType: "READ" | "WRITE" | "EXECUTE";
        /**
         * AgentCategoryEnum
         * @description Agent category
         * @enum {string}
         */
        AgentCategoryEnum: "CHATBOT" | "REACT" | "MULTI_AGENT_SYSTEM" | "REFLECTION_CRITIQUE" | "PLANNING_AGENT" | "DATABASE" | "EVALUATION" | "EXPERIMENTAL";
        /**
         * AgentDataCreateRequest
         * @description Agent master data creation request
         * @example {
         *       "category": "CHATBOT",
         *       "description": "AI chatbot agent that converses with users",
         *       "fallback_model_my_page_id": 2,
         *       "is_public": true,
         *       "is_system": false,
         *       "model_my_page_id": 1,
         *       "name": "AI Chatbot Agent",
         *       "persona_my_page_id": 2,
         *       "tool_my_page_id": [
         *         3,
         *         4,
         *         5
         *       ],
         *       "user_agent_description": "Chatbot agent for personal projects",
         *       "user_agent_title": "My Personal Chatbot",
         *       "user_id": "user123"
         *     }
         */
        AgentDataCreateRequest: {
            /**
             * User Id
             * @description Owner user ID (int or str)
             */
            user_id: number | string;
            /**
             * Model My Page Id
             * @description Model ID from agt_model_my_page table
             */
            model_my_page_id: number;
            /**
             * Persona My Page Id
             * @description Persona ID from agt_persona_my_page table
             */
            persona_my_page_id?: number | null;
            /**
             * Tool My Page Id
             * @description Tool ID list from my page
             */
            tool_my_page_id?: number[] | null;
            /**
             * Fallback Model My Page Id
             * @description Fallback model ID from my page model table
             */
            fallback_model_my_page_id: number;
            /** @default CHATBOT */
            category: components["schemas"]["AgentCategoryEnum"];
            /**
             * Name
             * @description Official name of the agent
             */
            name: string;
            /**
             * Description
             * @description Official description of the agent
             */
            description: string;
            /**
             * User Agent Title
             * @description User-defined agent title
             */
            user_agent_title?: string | null;
            /**
             * User Agent Description
             * @description User-defined agent description
             */
            user_agent_description?: string | null;
            /**
             * Is System
             * @description Whether this is a system-provided agent
             * @default false
             */
            is_system: boolean;
            /**
             * Is Public
             * @description Whether this is a public agent
             * @default false
             */
            is_public: boolean;
        };
        /**
         * AgentDataResponse
         * @description Agent master data query response
         */
        AgentDataResponse: {
            /**
             * Id
             * @description Unique agent ID
             */
            id: number;
            /**
             * User Id
             * @description Owner user ID (always returned as string)
             */
            user_id: string;
            /**
             * Model My Page Id
             * @description Model ID from agt_model_my_page table
             */
            model_my_page_id: number;
            /**
             * Persona My Page Id
             * @description Persona ID from agt_persona_my_page table
             */
            persona_my_page_id?: number | null;
            /**
             * Tool My Page Id
             * @description Tool ID list from my page
             */
            tool_my_page_id?: number[] | null;
            /**
             * Fallback Model My Page Id
             * @description Fallback model setting using model ID from my page model table
             */
            fallback_model_my_page_id: number;
            category: components["schemas"]["AgentCategoryEnum"];
            /**
             * Name
             * @description Official agent name
             */
            name: string;
            /**
             * Description
             * @description Official agent description
             */
            description: string;
            /**
             * User Agent Title
             * @description User-defined agent title
             */
            user_agent_title?: string | null;
            /**
             * User Agent Description
             * @description User-defined agent description
             */
            user_agent_description?: string | null;
            /**
             * Is System
             * @description Whether system-provided agent
             */
            is_system: boolean;
            /**
             * Is Public
             * @description Whether public agent
             */
            is_public: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        /**
         * AgentDataUpdateRequest
         * @description Agent master data update request (supports partial updates)
         */
        AgentDataUpdateRequest: {
            /**
             * Model My Page Id
             * @description Model ID from agt_model_my_page table
             */
            model_my_page_id?: number | null;
            /**
             * Persona My Page Id
             * @description Persona ID from agt_persona_my_page table
             */
            persona_my_page_id?: number | null;
            /**
             * Tool My Page Id
             * @description Tool ID list from my page
             */
            tool_my_page_id?: number[] | null;
            /**
             * Fallback Model My Page Id
             * @description Fallback model ID from my page model table
             */
            fallback_model_my_page_id?: number | null;
            /** @description Agent category */
            category?: components["schemas"]["AgentCategoryEnum"] | null;
            /**
             * Name
             * @description Official name of the agent
             */
            name?: string | null;
            /**
             * Description
             * @description Official description of the agent
             */
            description?: string | null;
            /**
             * User Agent Title
             * @description User-defined agent title
             */
            user_agent_title?: string | null;
            /**
             * User Agent Description
             * @description User-defined agent description
             */
            user_agent_description?: string | null;
            /**
             * Is Public
             * @description Whether this is a public agent
             */
            is_public?: boolean | null;
        };
        /**
         * AgentRoleCreateRequest
         * @description Agent role permission addition request
         * @example {
         *       "agent_data_id": 5,
         *       "role_id": 2
         *     }
         */
        AgentRoleCreateRequest: {
            /**
             * Agent Data Id
             * @description Agent data ID
             */
            agent_data_id: number;
            /**
             * Role Id
             * @description Target role/permission ID for sharing
             */
            role_id: number;
        };
        /**
         * AgentRoleResponse
         * @description Agent role permission query response
         */
        AgentRoleResponse: {
            /**
             * Id
             * @description Permission mapping record ID
             */
            id: number;
            /**
             * Agent Data Id
             * @description Agent data ID
             */
            agent_data_id: number;
            /**
             * Role Id
             * @description Target role/permission ID for sharing
             */
            role_id: number;
            /**
             * Created At
             * Format: date-time
             * @description Permission grant time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Permission modification time
             */
            updated_at: string;
        };
        /**
         * AgentRoleUpdateRequest
         * @description Agent role permission update request
         */
        AgentRoleUpdateRequest: {
            /**
             * Agent Data Id
             * @description Agent data ID
             */
            agent_data_id?: number | null;
            /**
             * Role Id
             * @description Role/permission ID to change
             */
            role_id?: number | null;
        };
        /**
         * AgentStatisticsDTO
         * @description Agent statistics DTO
         */
        AgentStatisticsDTO: {
            /**
             * Request Count
             * @description Number of requests
             */
            request_count: number;
            /**
             * Tool Call Count
             * @description Number of tool calls
             */
            tool_call_count: number;
            /** @description Token usage */
            token_usage: components["schemas"]["AgentTokenUsageDTO"];
        };
        /**
         * AgentSummaryDTO
         * @description Agent summary statistics DTO
         */
        "AgentSummaryDTO-Input": {
            /**
             * Agent My Page Id
             * @description Agent my page ID
             */
            agent_my_page_id: number;
            /**
             * Agent Name
             * @description Agent name
             */
            agent_name: string;
            /** @description Total period statistics */
            total_statistics: components["schemas"]["AgentStatisticsDTO"];
        };
        /**
         * AgentSummaryDTO
         * @description Agent summary statistics DTO
         */
        "AgentSummaryDTO-Output": {
            /**
             * Agent My Page Id
             * @description Agent my page ID
             */
            agent_my_page_id: number;
            /**
             * Agent Name
             * @description Agent name
             */
            agent_name: string;
            /** @description Total period statistics */
            total_statistics: components["schemas"]["AgentStatisticsDTO"];
        };
        /**
         * AgentTimeSeriesItemDTO
         * @description Time series agent statistics item DTO
         */
        "AgentTimeSeriesItemDTO-Input": {
            /**
             * Agent My Page Id
             * @description Agent my page ID
             */
            agent_my_page_id: number;
            /**
             * Agent Name
             * @description Agent name
             */
            agent_name: string;
            /** @description Statistics information */
            statistics: components["schemas"]["AgentStatisticsDTO"];
        };
        /**
         * AgentTimeSeriesItemDTO
         * @description Time series agent statistics item DTO
         */
        "AgentTimeSeriesItemDTO-Output": {
            /**
             * Agent My Page Id
             * @description Agent my page ID
             */
            agent_my_page_id: number;
            /**
             * Agent Name
             * @description Agent name
             */
            agent_name: string;
            /** @description Statistics information */
            statistics: components["schemas"]["AgentStatisticsDTO"];
        };
        /**
         * AgentTokenUsageDTO
         * @description Agent token usage DTO
         */
        AgentTokenUsageDTO: {
            /**
             * Input Tokens
             * @description Number of input tokens
             */
            input_tokens: number;
            /**
             * Output Tokens
             * @description Number of output tokens
             */
            output_tokens: number;
            /**
             * Total Tokens
             * @description Total number of tokens
             */
            total_tokens: number;
        };
        /**
         * AgentUsageRequestDTO
         * @description Agent usage inquiry request DTO
         * @example {
         *       "agent_my_page_id": [
         *         1,
         *         2,
         *         3
         *       ],
         *       "end_date": "2025-12-31T23:59:59Z",
         *       "granularity": "day",
         *       "start_date": "2025-01-01T00:00:00Z",
         *       "user_id": "Dr.Lee"
         *     }
         */
        AgentUsageRequestDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Agent My Page Id
             * @description Array of agent my page IDs
             */
            agent_my_page_id: number[];
            /**
             * Start Date
             * @description Query start date (ISO 8601)
             */
            start_date: string;
            /**
             * End Date
             * @description Query end date (ISO 8601)
             */
            end_date: string;
            /**
             * Granularity
             * @description Time series unit (hour, day, week, month, year)
             * @default day
             */
            granularity: string;
        };
        /**
         * AgentUsageResponseDTO
         * @description Agent usage response DTO
         * @example {
         *       "agent_summary": [
         *         {
         *           "agent_my_page_id": 1,
         *           "agent_name": "ChatBot",
         *           "total_statistics": {
         *             "request_count": 1250,
         *             "token_usage": {
         *               "input_tokens": 125000,
         *               "output_tokens": 87500,
         *               "total_tokens": 212500
         *             },
         *             "tool_call_count": 450
         *           }
         *         }
         *       ],
         *       "period": {
         *         "endDate": "2025-12-31T23:59:59Z",
         *         "granularity": "day",
         *         "startDate": "2025-01-01T00:00:00Z"
         *       },
         *       "timeSeriesData": {
         *         "2025-01-01": [
         *           {
         *             "agent_my_page_id": 1,
         *             "agent_name": "ChatBot",
         *             "statistics": {
         *               "request_count": 45,
         *               "token_usage": {
         *                 "input_tokens": 4500,
         *                 "output_tokens": 3200,
         *                 "total_tokens": 7700
         *               },
         *               "tool_call_count": 18
         *             }
         *           }
         *         ]
         *       },
         *       "total_statistics": {
         *         "request_count": 90,
         *         "token_usage": {
         *           "input_tokens": 9000,
         *           "output_tokens": 6400,
         *           "total_tokens": 15400
         *         },
         *         "tool_call_count": 36
         *       },
         *       "userId": "Dr.Lee"
         *     }
         */
        AgentUsageResponseDTO: {
            /**
             * Userid
             * @description User ID
             */
            userId: string;
            /** @description Query period information */
            period: components["schemas"]["PeriodDTO"];
            /**
             * Timeseriesdata
             * @description Time series data
             */
            timeSeriesData: {
                [key: string]: components["schemas"]["AgentTimeSeriesItemDTO-Output"][];
            };
            /** @description Total statistics */
            total_statistics: components["schemas"]["AgentStatisticsDTO"];
            /**
             * Agent Summary
             * @description Agent summary
             */
            agent_summary: components["schemas"]["AgentSummaryDTO-Output"][];
        };
        /**
         * ApiPermissionCreateDTO
         * @description API permission creation DTO
         */
        ApiPermissionCreateDTO: {
            /**
             * Path
             * @description API path
             */
            path: string;
            /**
             * Resource Type
             * @description Resource type
             */
            resource_type: string;
            /**
             * Http Method
             * @description HTTP method
             */
            http_method: string;
            /** @description Action type */
            action_type: components["schemas"]["ActionType"];
            /**
             * Required Role
             * @description Required role
             */
            required_role?: string | null;
        };
        /**
         * ApiPermissionPatchDTO
         * @description API permission partial update DTO
         */
        ApiPermissionPatchDTO: {
            /**
             * Path
             * @description API path
             */
            path?: string | null;
            /**
             * Resource Type
             * @description Resource type
             */
            resource_type?: string | null;
            /**
             * Http Method
             * @description HTTP method
             */
            http_method?: string | null;
            /** @description Action type */
            action_type?: components["schemas"]["ActionType"] | null;
            /**
             * Required Role
             * @description Required role
             */
            required_role?: string | null;
        };
        /**
         * ApiPermissionResponseDTO
         * @description API permission response DTO
         */
        ApiPermissionResponseDTO: {
            /**
             * Path
             * @description API path
             */
            path: string;
            /**
             * Resource Type
             * @description Resource type
             */
            resource_type: string;
            /**
             * Http Method
             * @description HTTP method
             */
            http_method: string;
            /** @description Action type */
            action_type: components["schemas"]["ActionType"];
            /**
             * Required Role
             * @description Required role
             */
            required_role?: string | null;
            /**
             * Id
             * @description Permission ID
             */
            id: number;
        };
        /**
         * ApiPermissionUpdateDTO
         * @description API permission full update DTO
         */
        ApiPermissionUpdateDTO: {
            /**
             * Path
             * @description API path
             */
            path: string;
            /**
             * Resource Type
             * @description Resource type
             */
            resource_type: string;
            /**
             * Http Method
             * @description HTTP method
             */
            http_method: string;
            /** @description Action type */
            action_type: components["schemas"]["ActionType"];
            /**
             * Required Role
             * @description Required role
             */
            required_role?: string | null;
        };
        /**
         * ChatCreateResponseDTO
         * @description Chat Creation Response DTO (includes token summary and optional metrics)
         * @example {
         *       "items": [
         *         {
         *           "agent_name": "supervisor",
         *           "category": "AIMessage",
         *           "id": 1,
         *           "qa_id": "qa_1",
         *           "role": "ai",
         *           "scenario_my_page_id": 24,
         *           "thread_id": "test_thread_001",
         *           "user_id": "user_1"
         *         }
         *       ],
         *       "performance_metrics": {
         *         "avg_step_latency_ms": 205.76,
         *         "checkpoint_count": 7,
         *         "error_count": 1,
         *         "retry_count": 2,
         *         "success_rate": 0.95,
         *         "total_latency_ms": 1234.56
         *       },
         *       "token_summary": {
         *         "duplicate_messages": 3,
         *         "input_tokens": 586,
         *         "original_messages": 1,
         *         "output_tokens": 28,
         *         "total_messages": 7,
         *         "total_tokens": 614
         *       }
         *     }
         */
        ChatCreateResponseDTO: {
            /**
             * Items
             * @description List of created chat records
             */
            items: components["schemas"]["ChatResponseDTO"][];
            /** @description Token usage summary */
            token_summary: components["schemas"]["TokenSummaryDTO"];
            /** @description Performance metrics (optional) */
            performance_metrics?: components["schemas"]["PerformanceMetricsDTO"] | null;
        };
        /**
         * ChatResponseDTO
         * @description Chat Response DTO
         */
        ChatResponseDTO: {
            /**
             * Id
             * @description Chat record primary key ID
             */
            id: number;
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
            /**
             * Agent Name
             * @description Agent name
             */
            agent_name: string;
            /**
             * Role
             * @description Role (human, ai, tool)
             */
            role: string;
            /**
             * Category
             * @description Category (HumanMessage, AIMessage, ToolMessage)
             */
            category: string;
            /**
             * Model Name
             * @description Model name
             */
            model_name?: string | null;
            /**
             * Content
             * @description Message content (JSON)
             */
            content?: {
                [key: string]: unknown;
            }[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Tool Calls
             * @description Tool call information (JSON)
             */
            tool_calls?: {
                [key: string]: unknown;
            }[] | null;
            /**
             * Stop Reason
             * @description Stop reason (max_tokens, stop_sequence, tool_use, etc.)
             */
            stop_reason?: string | null;
            /**
             * Finish Reason
             * @description Finish reason (stop, length, tool_calls, etc.)
             */
            finish_reason?: string | null;
            /**
             * Total Tokens
             * @description Total token count
             */
            total_tokens?: number | null;
            /**
             * Input Tokens
             * @description Input token count
             */
            input_tokens?: number | null;
            /**
             * Output Tokens
             * @description Output token count
             */
            output_tokens?: number | null;
            /**
             * Input Token Details Audio
             * @description Input audio tokens
             */
            input_token_details_audio?: number | null;
            /**
             * Input Token Details Cache Creation
             * @description Input cache creation tokens
             */
            input_token_details_cache_creation?: number | null;
            /**
             * Input Token Details Cache Read
             * @description Input cache read tokens
             */
            input_token_details_cache_read?: number | null;
            /**
             * Output Token Details Audio
             * @description Output audio tokens
             */
            output_token_details_audio?: number | null;
            /**
             * Output Token Details Reasoning
             * @description Output reasoning tokens
             */
            output_token_details_reasoning?: number | null;
            /**
             * Checkpoint Id
             * @description Checkpoint UUID (for chronological sorting)
             */
            checkpoint_id?: string | null;
            /**
             * Checkpoint Ns
             * @description Subgraph namespace (e.g., 'react agent:uuid')
             */
            checkpoint_ns?: string | null;
            /**
             * Checkpoint Ts
             * @description Checkpoint timestamp
             */
            checkpoint_ts?: string | null;
            /**
             * Parent Checkpoint Id
             * @description Parent checkpoint ID (for hierarchy tracking)
             */
            parent_checkpoint_id?: string | null;
            /**
             * Source
             * @description Checkpoint source: input/loop/...
             */
            source?: string | null;
            /**
             * Step
             * @description Loop step: -1/0/1/2...
             */
            step?: number | null;
            /**
             * Checkpoint Type
             * @description Checkpoint type: INPUT/LOOP/SUBGRAPH/FINAL
             */
            checkpoint_type?: string | null;
            /**
             * Execution Context
             * @description Execution stage: input_phase/initial_loop/node_execution/final_collection
             */
            execution_context?: string | null;
            /**
             * Is Final
             * @description Whether this is the final checkpoint
             */
            is_final?: boolean | null;
            /**
             * Is Original Message
             * @description Whether this is the first occurrence of the message
             */
            is_original_message?: boolean | null;
            /**
             * Message Id
             * @description AIMessage unique ID (response_metadata.id)
             */
            message_id?: string | null;
            /**
             * Is Token Counted
             * @description Whether token counting is completed
             */
            is_token_counted?: boolean | null;
            /**
             * Versions Seen Nodes
             * @description List of executed nodes (versions_seen)
             */
            versions_seen_nodes?: string[] | null;
            /**
             * Pending Actions
             * @description Scheduled actions (pending_writes)
             */
            pending_actions?: string[] | null;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        /**
         * ChatServiceDTO
         * @description Chat Service DTO
         * @example {
         *       "qa_id": "didim_qa_id",
         *       "scenario_my_page_id": 1,
         *       "thread_id": "didim_thread_id",
         *       "user_id": "didim_user_id"
         *     }
         */
        ChatServiceDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
        };
        /**
         * CheckpointErrorDTO
         * @description 체크포인트 에러 정보
         */
        CheckpointErrorDTO: {
            /**
             * Type
             * @description Error type
             */
            type: string;
            /**
             * Source
             * @description Error source
             */
            source: string;
            /**
             * Message
             * @description Error message
             */
            message?: string | null;
            /**
             * Timestamp
             * @description Error timestamp
             */
            timestamp?: string | null;
        };
        /**
         * EdgeDataItem
         * @description Single EdgeData item DTO
         * @example {
         *       "edge_id": "edge_id:1",
         *       "setting": {
         *         "connectionCount": 1
         *       },
         *       "source": "node_id:1",
         *       "target": "node_id:2",
         *       "type": "smoothstep"
         *     }
         */
        EdgeDataItem: {
            /**
             * Edge Id
             * @description edge id
             */
            edge_id: string;
            /**
             * Source
             * @description source node id
             */
            source: string;
            /**
             * Target
             * @description target node id
             */
            target: string;
            /**
             * Type
             * @description edge type
             */
            type: string;
            /**
             * Setting
             * @description edge setting
             */
            setting?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * EdgeDataItemPartialUpdate
         * @description PATCH /scenario/{id} - individual edge partial update DTO
         */
        EdgeDataItemPartialUpdate: {
            /**
             * Edge Id
             * @description ID of the edge to be modified
             */
            edge_id: string;
            /**
             * Source
             * @description source node id
             */
            source?: string | null;
            /**
             * Target
             * @description target node id
             */
            target?: string | null;
            /**
             * Type
             * @description edge type
             */
            type?: string | null;
            /**
             * Setting
             * @description edge setting
             */
            setting?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * EdgeDataItemResponse
         * @description Single EdgeData response item DTO
         * @example {
         *       "created_at": "2021-01-01T00:00:00",
         *       "edge_id": "edge_id:1",
         *       "id": 1,
         *       "setting": {
         *         "connectionCount": 1
         *       },
         *       "source": "node_id:1",
         *       "target": "node_id:2",
         *       "type": "smoothstep",
         *       "updated_at": "2021-01-01T00:00:00"
         *     }
         */
        EdgeDataItemResponse: {
            /**
             * Id
             * @description primary key id
             */
            id: number;
            /**
             * Edge Id
             * @description edge id
             */
            edge_id: string;
            /**
             * Source
             * @description source node id
             */
            source: string;
            /**
             * Target
             * @description target node id
             */
            target: string;
            /**
             * Type
             * @description edge type
             */
            type: string;
            /**
             * Setting
             * @description edge setting
             */
            setting?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             * @description created at
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description updated at
             */
            updated_at: string;
        };
        /**
         * EdgeDataMyPageRequest
         * @description My page based edge creation/update request
         * @example {
         *       "edges": [
         *         {
         *           "edge_id": "edge_id:0",
         *           "setting": {
         *             "connectionCount": 1
         *           },
         *           "source": "node_id:0",
         *           "target": "node_id:1",
         *           "type": "smoothstep"
         *         }
         *       ],
         *       "scenario_my_page_id": 1,
         *       "user_id": "user123"
         *     }
         */
        EdgeDataMyPageRequest: {
            /**
             * User Id
             * @description Requesting user ID
             */
            user_id: number | string;
            /**
             * Scenario My Page Id
             * @description ID from agt_scenario_my_page table
             */
            scenario_my_page_id: number;
            /**
             * Edges
             * @description Edge list
             */
            edges: components["schemas"]["EdgeDataItem"][];
        };
        /**
         * EdgeDataMyPageResponse
         * @description My page based edge response
         * @example {
         *       "agt_scenarios_data_id": 10,
         *       "created_at": "2024-12-19T10:00:00Z",
         *       "edges": [],
         *       "is_owner": true,
         *       "scenario_my_page_id": 1,
         *       "total_count": 1,
         *       "updated_at": "2024-12-19T10:00:00Z",
         *       "user_id": "user123"
         *     }
         */
        EdgeDataMyPageResponse: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description ID from agt_scenario_my_page table
             */
            scenario_my_page_id: number;
            /**
             * Agt Scenarios Data Id
             * @description Original scenario ID
             */
            agt_scenarios_data_id: number;
            /**
             * Total Count
             * @description Total number of edges
             */
            total_count: number;
            /**
             * Edges
             * @description Edge list
             */
            edges: components["schemas"]["EdgeDataItemResponse"][];
            /**
             * Is Owner
             * @description Whether original owner
             */
            is_owner: boolean;
            /**
             * Created At
             * @description Creation time
             */
            created_at?: string | null;
            /**
             * Updated At
             * @description Update time
             */
            updated_at?: string | null;
        };
        /**
         * EdgeDataMyPageUpdateRequest
         * @description My page based edge partial update request
         */
        EdgeDataMyPageUpdateRequest: {
            /**
             * User Id
             * @description Requesting user ID
             */
            user_id?: number | string | null;
            /**
             * Scenario My Page Id
             * @description ID from agt_scenario_my_page table
             */
            scenario_my_page_id?: number | null;
            /**
             * Edges
             * @description List of edges to be modified
             */
            edges?: components["schemas"]["EdgeDataItemPartialUpdate"][] | null;
        };
        /**
         * EdgeDataRequest
         * @description Unified EdgeData request structure - all APIs use this structure
         * @example {
         *       "agt_scenarios_data_id": 1,
         *       "edges": [
         *         {
         *           "edge_id": "edge_id:1",
         *           "setting": {
         *             "connectionCount": 1
         *           },
         *           "source": "node_id:1",
         *           "target": "node_id:2",
         *           "type": "smoothstep"
         *         },
         *         {
         *           "edge_id": "edge_id:2",
         *           "setting": {
         *             "connectionCount": 1
         *           },
         *           "source": "node_id:2",
         *           "target": "node_id:3",
         *           "type": "smoothstep"
         *         }
         *       ],
         *       "user_id": "user123"
         *     }
         */
        EdgeDataRequest: {
            /**
             * User Id
             * @description user id (int or str)
             */
            user_id: number | string;
            /**
             * Agt Scenarios Data Id
             * @description scenarios data id
             */
            agt_scenarios_data_id: number;
            /**
             * Edges
             * @description edge data list
             */
            edges: components["schemas"]["EdgeDataItem"][];
        };
        /**
         * EdgeDataResponse
         * @description Unified EdgeData response structure - all APIs use this structure
         * @example {
         *       "agt_scenarios_data_id": 1,
         *       "edges": [
         *         {
         *           "created_at": "2021-01-01T00:00:00",
         *           "edge_id": "edge_id:1",
         *           "id": 1,
         *           "setting": {
         *             "connectionCount": 1
         *           },
         *           "source": "node_id:1",
         *           "target": "node_id:2",
         *           "type": "smoothstep",
         *           "updated_at": "2021-01-01T00:00:00"
         *         },
         *         {
         *           "created_at": "2021-01-01T00:00:00",
         *           "edge_id": "edge_id:2",
         *           "id": 2,
         *           "setting": {
         *             "connectionCount": 1
         *           },
         *           "source": "node_id:2",
         *           "target": "node_id:3",
         *           "type": "smoothstep",
         *           "updated_at": "2021-01-01T00:00:00"
         *         }
         *       ],
         *       "user_id": "user123"
         *     }
         */
        EdgeDataResponse: {
            /**
             * User Id
             * @description user id (always returned as string)
             */
            user_id: string;
            /**
             * Agt Scenarios Data Id
             * @description scenarios data id
             */
            agt_scenarios_data_id: number;
            /**
             * Edges
             * @description edge data list
             */
            edges: components["schemas"]["EdgeDataItemResponse"][];
        };
        /**
         * EdgeDataScenarioUpdateRequest
         * @description PATCH /scenario/{id} - scenario edge partial update request DTO
         */
        EdgeDataScenarioUpdateRequest: {
            /**
             * User Id
             * @description user id (int or str)
             */
            user_id: number | string;
            /**
             * Agt Scenarios Data Id
             * @description scenarios data id
             */
            agt_scenarios_data_id: number;
            /**
             * Edges
             * @description List of edges to be partially updated
             */
            edges: components["schemas"]["EdgeDataItemPartialUpdate"][];
        };
        /**
         * EdgeDataUpdateRequest
         * @description EdgeData partial update request DTO (for PATCH)
         * @example {
         *       "edges": [
         *         {
         *           "edge_id": "edge_id:1",
         *           "setting": {
         *             "connectionCount": 1
         *           },
         *           "source": "node_id:1",
         *           "target": "node_id:2",
         *           "type": "smoothstep"
         *         },
         *         {
         *           "edge_id": "edge_id:2",
         *           "setting": {
         *             "connectionCount": 1
         *           },
         *           "source": "node_id:2",
         *           "target": "node_id:3",
         *           "type": "smoothstep"
         *         }
         *       ]
         *     }
         */
        EdgeDataUpdateRequest: {
            /**
             * Edges
             * @description edge data list for partial update
             */
            edges: components["schemas"]["EdgeDataItem"][];
        };
        /**
         * GraphRequestDTO
         * @description Required information for graph creation. All fields must be included.
         * @example {
         *       "agt_scenarios_data_id": 1,
         *       "user_id": "user_123"
         *     }
         */
        GraphRequestDTO: {
            /**
             * User Id
             * @description User ID (required, e.g., 'user_123', 'admin_001')
             * @example user_123
             * @example admin_001
             * @example test_user
             */
            user_id: string;
            /**
             * Agt Scenarios Data Id
             * @description ID from agt_scenarios_data table (required, positive integer)
             * @example 1
             * @example 24
             * @example 100
             */
            agt_scenarios_data_id: number;
        };
        /**
         * GraphResponseDTO
         * @example {
         *       "agt_scenarios_data_id": 1,
         *       "stategraph": "<langgraph.graph.state.StateGraph object at 0x7fb9d9a6d9d0>",
         *       "user_id": "user_123"
         *     }
         */
        GraphResponseDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Agt Scenarios Data Id
             * @description agt_scenarios_data ID
             */
            agt_scenarios_data_id: number;
            /**
             * Stategraph
             * @description str(stategraph)
             */
            stategraph: unknown;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HistoryCreateDTO
         * @description History creation DTO
         */
        HistoryCreateDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
            /**
             * Question
             * @description Question information JSON
             */
            question: {
                [key: string]: unknown;
            };
            /**
             * Answer
             * @description Answer information JSON
             */
            answer?: {
                [key: string]: unknown;
            } | null;
            /**
             * Attributes
             * @description Attributes list
             */
            attributes?: string[] | null;
        };
        /**
         * HistoryMemoryConfigCreateDTO
         * @description History memory configuration creation DTO
         * @example {
         *       "max_summary_tokens": 10000,
         *       "max_tokens_before_summary": 40000,
         *       "max_tokens_summary": 50000,
         *       "max_tokens_trim": 100000
         *     }
         */
        HistoryMemoryConfigCreateDTO: {
            /**
             * Max Tokens Trim
             * @description Maximum tokens for trim node
             */
            max_tokens_trim: number;
            /**
             * Max Tokens Summary
             * @description Total token limit for summary node
             */
            max_tokens_summary: number;
            /**
             * Max Tokens Before Summary
             * @description Summary start threshold for summary node
             */
            max_tokens_before_summary: number;
            /**
             * Max Summary Tokens
             * @description Maximum tokens for summary result in summary node
             */
            max_summary_tokens: number;
        };
        /**
         * HistoryMemoryConfigResponseDTO
         * @description History memory configuration response DTO
         */
        HistoryMemoryConfigResponseDTO: {
            /**
             * Id
             * @description History memory configuration ID
             */
            id: number;
            /**
             * Max Tokens Trim
             * @description Maximum tokens for trim node
             */
            max_tokens_trim: number;
            /**
             * Max Tokens Summary
             * @description Total token limit for summary node
             */
            max_tokens_summary: number;
            /**
             * Max Tokens Before Summary
             * @description Summary start threshold for summary node
             */
            max_tokens_before_summary: number;
            /**
             * Max Summary Tokens
             * @description Maximum tokens for summary result in summary node
             */
            max_summary_tokens: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Update time
             */
            updated_at: string;
        };
        /**
         * HistoryMemoryConfigUpdateDTO
         * @description History memory configuration update DTO (supports partial updates)
         */
        HistoryMemoryConfigUpdateDTO: {
            /**
             * Max Tokens Trim
             * @description Maximum tokens for trim node
             */
            max_tokens_trim?: number | null;
            /**
             * Max Tokens Summary
             * @description Total token limit for summary node
             */
            max_tokens_summary?: number | null;
            /**
             * Max Tokens Before Summary
             * @description Summary start threshold for summary node
             */
            max_tokens_before_summary?: number | null;
            /**
             * Max Summary Tokens
             * @description Maximum tokens for summary result in summary node
             */
            max_summary_tokens?: number | null;
        };
        /**
         * HistoryMemoryScenarioCreateDTO
         * @description History memory scenario link creation DTO
         * @example {
         *       "history_memory_config_id": 3,
         *       "model_my_page_id": 5,
         *       "scenario_data_id": 1
         *     }
         */
        HistoryMemoryScenarioCreateDTO: {
            /**
             * Scenario Data Id
             * @description Scenario data ID
             */
            scenario_data_id: number;
            /**
             * Model My Page Id
             * @description Model my page ID
             */
            model_my_page_id: number;
            /**
             * History Memory Config Id
             * @description History memory configuration ID
             */
            history_memory_config_id: number;
        };
        /**
         * HistoryMemoryScenarioResponseDTO
         * @description History memory scenario link response DTO
         */
        HistoryMemoryScenarioResponseDTO: {
            /**
             * Id
             * @description Link record ID
             */
            id: number;
            /**
             * Scenario Data Id
             * @description Scenario data ID
             */
            scenario_data_id: number;
            /**
             * Model My Page Id
             * @description Model my page ID
             */
            model_my_page_id: number;
            /**
             * History Memory Config Id
             * @description History memory configuration ID
             */
            history_memory_config_id: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Update time
             */
            updated_at: string;
        };
        /**
         * HistoryMemoryScenarioUpdateDTO
         * @description History memory scenario link update DTO (supports partial updates)
         */
        HistoryMemoryScenarioUpdateDTO: {
            /**
             * Scenario Data Id
             * @description Scenario data ID
             */
            scenario_data_id?: number | null;
            /**
             * Model My Page Id
             * @description Model my page ID
             */
            model_my_page_id?: number | null;
            /**
             * History Memory Config Id
             * @description History memory configuration ID
             */
            history_memory_config_id?: number | null;
        };
        /**
         * HistoryResponseDTO
         * @description History response DTO
         */
        HistoryResponseDTO: {
            /**
             * Id
             * @description History ID
             */
            id: number;
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
            /**
             * Question
             * @description Question information JSON
             */
            question: {
                [key: string]: unknown;
            };
            /**
             * Answer
             * @description Answer information JSON
             */
            answer: {
                [key: string]: unknown;
            };
            /**
             * Attributes
             * @description Attributes list
             */
            attributes?: string[] | null;
            /**
             * Created At
             * Format: date-time
             * @description Creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Update time
             */
            updated_at: string;
        };
        /**
         * HistoryUpdateAnswerDTO
         * @description History answer update DTO
         */
        HistoryUpdateAnswerDTO: {
            /**
             * Answer
             * @description Answer information JSON
             */
            answer: {
                [key: string]: unknown;
            };
        };
        /**
         * InvokeInputDTO
         * @description Message DTO sent from client to server
         */
        InvokeInputDTO: {
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             * @example 123123123124
             */
            scenario_my_page_id: number;
            /**
             * User Id
             * @description User ID
             * @example 123123123124454
             */
            user_id: string;
            /**
             * Thread Id
             * @description Conversation flow distinction ID (Text)
             * @example 123123123124890790
             */
            thread_id: string;
            /**
             * Qa Id
             * @description Question-answer unit ID (Text)
             * @example 123123123124234234
             */
            qa_id: string;
            /**
             * Message
             * @description Message entered by user (can be text, list for Claude multi-turn, or dict for structured input)
             * @example What is the capital of South Korea?
             * @example [
             *       {
             *         "text": "Hello",
             *         "type": "text"
             *       }
             *     ]
             */
            message: string | unknown[] | {
                [key: string]: unknown;
            };
            /**
             * Attachments
             * @description Attachment file URL list (images, PDF, audio, etc. - optional)
             * @example [
             *       "https://example.com/image.jpg",
             *       "https://example.com/document.pdf",
             *       "https://example.com/audio.wav"
             *     ]
             */
            attachments?: string[] | null;
        };
        /**
         * InvokeResponseDTO
         * @description Message DTO sent from server to client
         */
        InvokeResponseDTO: {
            /**
             * Qa Id
             * @description Question-answer unit ID (Text)
             */
            qa_id: string;
            /**
             * Message
             * @description Message content (can be text string, list for tool use, or dict for structured output)
             */
            message?: string | unknown[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Attachments
             * @description Attachment file URL list (images, PDF, audio, etc. - optional)
             * @example [
             *       "https://example.com/image.jpg",
             *       "https://example.com/document.pdf",
             *       "https://example.com/audio.wav"
             *     ]
             */
            attachments?: string[] | null;
        };
        /**
         * MemorySettingCreateDTO
         * @description 간소화된 메모리 설정 생성 DTO
         */
        MemorySettingCreateDTO: {
            /**
             * User Id
             * @description 사용자 ID
             */
            user_id: string;
            /**
             * User Model Id
             * @description 요약에 사용할 모델 ID
             */
            user_model_id: number;
            /**
             * Max Tokens Before Summary
             * @description 요약 시작 전 최대 토큰 수 (기본값: 4000)
             * @default 4000
             */
            max_tokens_before_summary: number;
            /**
             * Messages To Keep
             * @description 요약 후 유지할 메시지 수 (기본값: 20)
             * @default 20
             */
            messages_to_keep: number;
        };
        /**
         * MemorySettingPatchDTO
         * @description 간소화된 메모리 설정 부분 수정 DTO
         */
        MemorySettingPatchDTO: {
            /**
             * User Model Id
             * @description 요약에 사용할 모델 ID
             */
            user_model_id?: number | null;
            /**
             * Max Tokens Before Summary
             * @description 요약 시작 전 최대 토큰 수
             */
            max_tokens_before_summary?: number | null;
            /**
             * Messages To Keep
             * @description 요약 후 유지할 메시지 수
             */
            messages_to_keep?: number | null;
        };
        /**
         * MemorySettingResponseDTO
         * @description 간소화된 메모리 설정 응답 DTO
         */
        MemorySettingResponseDTO: {
            /**
             * Id
             * @description 메모리 설정 ID
             */
            id: number;
            /**
             * User Id
             * @description 사용자 ID
             */
            user_id: string;
            /**
             * User Model Id
             * @description 요약에 사용할 모델 ID
             */
            user_model_id: number;
            /**
             * Max Tokens Before Summary
             * @description 요약 시작 전 최대 토큰 수
             */
            max_tokens_before_summary: number;
            /**
             * Messages To Keep
             * @description 요약 후 유지할 메시지 수
             */
            messages_to_keep: number;
            /**
             * Created At
             * Format: date-time
             * @description 생성 시간
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description 수정 시간
             */
            updated_at: string;
        };
        /**
         * ModelUsageRequestDTO
         * @description Model usage inquiry request DTO
         * @example {
         *       "end_date": "2025-12-31",
         *       "models": [
         *         170,
         *         203,
         *         50
         *       ],
         *       "start_date": "2025-01-01",
         *       "user_id": "Dr.Lee"
         *     }
         */
        ModelUsageRequestDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Models
             * @description Array of model IDs to compare
             */
            models: number[];
            /**
             * Start Date
             * @description Query start date (YYYY-MM-DD format)
             */
            start_date: string;
            /**
             * End Date
             * @description Query end date (YYYY-MM-DD format)
             */
            end_date: string;
        };
        /**
         * ModelUsageResponseDTO
         * @description Model usage response DTO
         * @example {
         *       "input_cost_per_token": 0.000003,
         *       "input_tokens": 6000,
         *       "model_id": 50,
         *       "model_name": "o4-mini",
         *       "output_cost_per_token": 0.000006,
         *       "output_tokens": 4000,
         *       "total_cost": 0.042,
         *       "total_tokens": 10000
         *     }
         */
        ModelUsageResponseDTO: {
            /**
             * Model Id
             * @description Model ID
             */
            model_id: number;
            /**
             * Model Name
             * @description Model name
             */
            model_name: string;
            /**
             * Input Cost Per Token
             * @description Cost per input token
             */
            input_cost_per_token: number;
            /**
             * Output Cost Per Token
             * @description Cost per output token
             */
            output_cost_per_token: number;
            /**
             * Total Tokens
             * @description Total token usage
             */
            total_tokens: number;
            /**
             * Input Tokens
             * @description Input token usage
             */
            input_tokens: number;
            /**
             * Output Tokens
             * @description Output token usage
             */
            output_tokens: number;
            /**
             * Total Cost
             * @description Total cost
             */
            total_cost: number;
        };
        /**
         * MyPageAgentCreateRequest
         * @description My page agent addition request
         * @example {
         *       "agent_data_id": 5,
         *       "is_favorite": true,
         *       "user_id": "user123",
         *       "user_my_agent_description": "Settings for personal projects",
         *       "user_my_agent_title": "My Chatbot Agent"
         *     }
         */
        MyPageAgentCreateRequest: {
            /**
             * User Id
             * @description My page owner ID (int or str)
             */
            user_id: number | string;
            /**
             * Agent Data Id
             * @description Agent master ID to add to my page (references AgentDataEntity)
             */
            agent_data_id: number;
            /**
             * User My Agent Title
             * @description User-defined personal alias (uses original name if not provided)
             */
            user_my_agent_title?: string | null;
            /**
             * User My Agent Description
             * @description User-written personal memo and usage purpose
             */
            user_my_agent_description?: string | null;
            /**
             * Is Favorite
             * @description Whether this is a favorite in my page (displayed at top priority)
             * @default false
             */
            is_favorite: boolean;
        };
        /**
         * MyPageAgentResponse
         * @description My page agent query response (pure CRUD - returns single entity only)
         */
        MyPageAgentResponse: {
            /**
             * Id
             * @description Unique identifier of my page item (PK)
             */
            id: number;
            /**
             * User Id
             * @description My page owner ID (always returned as string)
             */
            user_id: string;
            /**
             * Agent Data Id
             * @description Related agent master data ID (references AgentDataEntity)
             */
            agent_data_id: number;
            /**
             * User My Agent Title
             * @description User-defined personal alias (may differ from original)
             */
            user_my_agent_title?: string | null;
            /**
             * User My Agent Description
             * @description User-written personal memo and usage method
             */
            user_my_agent_description?: string | null;
            /**
             * Is Favorite
             * @description Whether this is a favorite in my page
             */
            is_favorite: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Time when added to my page
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update time of my page settings
             */
            updated_at: string;
        };
        /**
         * MyPageAgentResponseWithScenarios
         * @description My page agent query response (includes scenario connection information)
         */
        MyPageAgentResponseWithScenarios: {
            /**
             * Id
             * @description Unique identifier of my page item (PK)
             */
            id: number;
            /**
             * User Id
             * @description My page owner ID (always returned as string)
             */
            user_id: string;
            /**
             * Agent Data Id
             * @description Related agent master data ID (references AgentDataEntity)
             */
            agent_data_id: number;
            /**
             * User My Agent Title
             * @description User-defined personal alias (may differ from original)
             */
            user_my_agent_title?: string | null;
            /**
             * User My Agent Description
             * @description User-written personal memo and usage method
             */
            user_my_agent_description?: string | null;
            /**
             * Is Favorite
             * @description Whether this is a favorite in my page
             */
            is_favorite: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Time when added to my page
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update time of my page settings
             */
            updated_at: string;
            /**
             * Has Scenario
             * @description Whether connected to scenarios (True if connected to 1 or more)
             */
            has_scenario: boolean;
            /**
             * Scenarios
             * @description List of connected scenario information (includes agt_scenarios_data, agt_scenario_my_page info)
             * @default []
             */
            scenarios: {
                [key: string]: unknown;
            }[];
            /**
             * Count Scenario
             * @description Number of scenarios connected to the agent in MyPage
             * @default 0
             */
            count_scenario: number;
        };
        /**
         * MyPageAgentUpdateRequest
         * @description My page agent update request (supports partial updates)
         */
        MyPageAgentUpdateRequest: {
            /**
             * User My Agent Title
             * @description Personal alias to update
             */
            user_my_agent_title?: string | null;
            /**
             * User My Agent Description
             * @description Personal memo to update
             */
            user_my_agent_description?: string | null;
            /**
             * Is Favorite
             * @description Change favorite status
             */
            is_favorite?: boolean | null;
        };
        /**
         * MyPagePersonaCreateRequest
         * @example {
         *       "is_favorite": true,
         *       "persona_data_id": 5,
         *       "user_id": "user123",
         *       "user_my_persona_description": "Settings specialized for personal projects and team code reviews",
         *       "user_my_persona_title": "My Python Development Helper"
         *     }
         */
        MyPagePersonaCreateRequest: {
            /**
             * User Id
             * @description My page owner user ID
             */
            user_id: string;
            /**
             * Persona Data Id
             * @description Original persona ID to add to my page (PersonaDataEntity reference)
             */
            persona_data_id: number;
            /**
             * User My Persona Title
             * @description Personal alias set by user (uses original name if not entered)
             */
            user_my_persona_title?: string | null;
            /**
             * User My Persona Description
             * @description Personal notes and usage purpose written by user
             */
            user_my_persona_description?: string | null;
            /**
             * Is Favorite
             * @description Whether favorite in my page (display priority at top)
             * @default false
             */
            is_favorite: boolean;
        };
        /** MyPagePersonaResponse */
        MyPagePersonaResponse: {
            /**
             * Id
             * @description My page item unique identifier (PK)
             */
            id: number;
            /**
             * User Id
             * @description My page owner ID
             */
            user_id: string;
            /**
             * Persona Data Id
             * @description Associated persona original data ID (PersonaDataEntity reference)
             */
            persona_data_id: number;
            /**
             * User My Persona Title
             * @description Personal alias set by user (may differ from original)
             */
            user_my_persona_title?: string | null;
            /**
             * User My Persona Description
             * @description Personal notes and usage methods written by user
             */
            user_my_persona_description?: string | null;
            /**
             * Is Favorite
             * @description Whether favorite in my page
             */
            is_favorite: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Time added to my page
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description My page settings last update time
             */
            updated_at: string;
        };
        /**
         * MyPagePersonaResponseWithConnections
         * @description My page persona query response (including agent and scenario connection information)
         */
        MyPagePersonaResponseWithConnections: {
            /**
             * Id
             * @description My page item unique identifier (PK)
             */
            id: number;
            /**
             * User Id
             * @description My page owner ID
             */
            user_id: string;
            /**
             * Persona Data Id
             * @description Associated persona original data ID (PersonaDataEntity reference)
             */
            persona_data_id: number;
            /**
             * User My Persona Title
             * @description Personal alias set by user (may differ from original)
             */
            user_my_persona_title?: string | null;
            /**
             * User My Persona Description
             * @description Personal notes and usage methods written by user
             */
            user_my_persona_description?: string | null;
            /**
             * Is Favorite
             * @description Whether favorite in my page
             */
            is_favorite: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Time added to my page
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description My page settings last update time
             */
            updated_at: string;
            /**
             * Has Scenario
             * @description Whether scenario is connected (True when 1 or more connected)
             */
            has_scenario: boolean;
            /**
             * Scenarios
             * @description Connected scenario information list (includes agt_scenarios_data, agt_scenario_my_page info)
             * @default []
             */
            scenarios: {
                [key: string]: unknown;
            }[];
            /**
             * Count Scenario
             * @description Number of scenarios connected to PersonaMyPage
             * @default 0
             */
            count_scenario: number;
            /**
             * Has Agent
             * @description Whether agent is connected (True when 1 or more connected)
             */
            has_agent: boolean;
            /**
             * Agents
             * @description Connected agent information list (includes agt_agents_data, agt_agent_my_page info)
             * @default []
             */
            agents: {
                [key: string]: unknown;
            }[];
            /**
             * Count Agent
             * @description Number of agents connected to PersonaMyPage
             * @default 0
             */
            count_agent: number;
        };
        /** MyPagePersonaUpdateRequest */
        MyPagePersonaUpdateRequest: {
            /**
             * User My Persona Title
             * @description Personal alias to update
             */
            user_my_persona_title?: string | null;
            /**
             * User My Persona Description
             * @description Personal notes to update
             */
            user_my_persona_description?: string | null;
            /**
             * Is Favorite
             * @description Change favorite status
             */
            is_favorite?: boolean | null;
        };
        /**
         * MyPageScenarioCreateRequest
         * @description My page scenario addition request
         * @example {
         *       "is_favorite": true,
         *       "scenario_data_id": 5,
         *       "user_id": "user123",
         *       "user_my_scenario_description": "Settings for personal projects",
         *       "user_my_scenario_title": "My Chatbot Scenario"
         *     }
         */
        MyPageScenarioCreateRequest: {
            /**
             * User Id
             * @description My page owner ID
             */
            user_id: string;
            /**
             * Scenario Data Id
             * @description Scenario master ID to add to my page (references ScenarioDataEntity)
             */
            scenario_data_id: number;
            /**
             * User My Scenario Title
             * @description User-defined personal alias (uses original name if not provided)
             */
            user_my_scenario_title?: string | null;
            /**
             * User My Scenario Description
             * @description User-written personal memo and usage purpose
             */
            user_my_scenario_description?: string | null;
            /**
             * Is Favorite
             * @description Whether this is a favorite in my page (displayed at top priority)
             * @default false
             */
            is_favorite: boolean;
        };
        /**
         * MyPageScenarioResponse
         * @description My page scenario query response (pure CRUD - returns single entity only)
         */
        MyPageScenarioResponse: {
            /**
             * Id
             * @description Unique identifier of my page item (PK)
             */
            id: number;
            /**
             * User Id
             * @description My page owner ID
             */
            user_id: string;
            /**
             * Scenario Data Id
             * @description Related scenario master data ID (references ScenarioDataEntity)
             */
            scenario_data_id: number;
            /**
             * User My Scenario Title
             * @description User-defined personal alias (may differ from original)
             */
            user_my_scenario_title?: string | null;
            /**
             * User My Scenario Description
             * @description User-written personal memo and usage method
             */
            user_my_scenario_description?: string | null;
            /**
             * Is Favorite
             * @description Whether this is a favorite in my page
             */
            is_favorite: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Time added to my page
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description My page settings last update time
             */
            updated_at: string;
            /**
             * Count Agent
             * @description Number of unique agents connected to the scenario
             */
            count_agent?: number | null;
            /**
             * Count Model
             * @description Total count of models used by all agents in the scenario (including duplicates)
             */
            count_model?: number | null;
            /**
             * Count Persona
             * @description Total count of personas used by all agents in the scenario (including duplicates)
             */
            count_persona?: number | null;
            /**
             * Count Tool
             * @description Total count of tools used by all agents in the scenario (including duplicates)
             */
            count_tool?: number | null;
        };
        /**
         * MyPageScenarioUpdateRequest
         * @description My page scenario update request (supports partial updates)
         */
        MyPageScenarioUpdateRequest: {
            /**
             * User My Scenario Title
             * @description Personal alias to update
             */
            user_my_scenario_title?: string | null;
            /**
             * User My Scenario Description
             * @description Personal memo to update
             */
            user_my_scenario_description?: string | null;
            /**
             * Is Favorite
             * @description Change favorite status
             */
            is_favorite?: boolean | null;
        };
        /**
         * NodeDataMyPageRequest
         * @description My page based node creation/update request
         * @example {
         *       "is_deep_agent_architecture": false,
         *       "nodes": [
         *         {
         *           "connectedTo": [
         *             "agent_0"
         *           ],
         *           "connections": 1,
         *           "isCollapsed": false,
         *           "node_id": "node_id:0",
         *           "node_name": "start",
         *           "position": {
         *             "x": 100,
         *             "y": 300
         *           },
         *           "sourcePosition": "right",
         *           "targetPosition": "left",
         *           "type": "start"
         *         }
         *       ],
         *       "scenario_my_page_id": 1,
         *       "user_id": "user123"
         *     }
         */
        NodeDataMyPageRequest: {
            /**
             * User Id
             * @description Requesting user ID
             */
            user_id: number | string;
            /**
             * Scenario My Page Id
             * @description ID from agt_scenario_my_page table
             */
            scenario_my_page_id: number;
            /**
             * Is Deep Agent Architecture
             * @description deep agent architecture? True: True, False: False
             * @default false
             */
            is_deep_agent_architecture: boolean;
            /**
             * Nodes
             * @description Node list
             */
            nodes: components["schemas"]["NodeItem"][];
        };
        /**
         * NodeDataMyPageResponse
         * @description My page based node response
         * @example {
         *       "agt_scenarios_data_id": 10,
         *       "created_at": "2024-12-19T10:00:00Z",
         *       "is_owner": true,
         *       "nodes": [],
         *       "scenario_my_page_id": 1,
         *       "total_count": 1,
         *       "updated_at": "2024-12-19T10:00:00Z",
         *       "user_id": "user123"
         *     }
         */
        NodeDataMyPageResponse: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description ID from agt_scenario_my_page table
             */
            scenario_my_page_id: number;
            /**
             * Agt Scenarios Data Id
             * @description Original scenario ID
             */
            agt_scenarios_data_id: number;
            /**
             * Total Count
             * @description Total node count
             */
            total_count: number;
            /**
             * Nodes
             * @description Node list
             */
            nodes: components["schemas"]["NodeItem"][];
            /**
             * Is Owner
             * @description Whether user is the original owner
             */
            is_owner: boolean;
            /**
             * Created At
             * @description Creation time
             */
            created_at?: string | null;
            /**
             * Updated At
             * @description Update time
             */
            updated_at?: string | null;
        };
        /**
         * NodeDataMyPageUpdateRequest
         * @description My page based node partial update request
         */
        NodeDataMyPageUpdateRequest: {
            /**
             * User Id
             * @description Requesting user ID
             */
            user_id?: number | string | null;
            /**
             * Scenario My Page Id
             * @description ID from agt_scenario_my_page table
             */
            scenario_my_page_id?: number | null;
            /**
             * Is Deep Agent Architecture
             * @description deep agent architecture? True: True, False: False
             */
            is_deep_agent_architecture?: boolean | null;
            /**
             * Nodes
             * @description List of nodes to be modified
             */
            nodes?: components["schemas"]["NodeItemPartialUpdate"][] | null;
        };
        /**
         * NodeDataRequest
         * @description POST, PUT, PATCH - node input (actual input structure)
         * @example {
         *       "agt_scenarios_data_id": 1,
         *       "is_deep_agent_architecture": false,
         *       "nodes": [
         *         {
         *           "connectedTo": [
         *             "agent_0"
         *           ],
         *           "connections": 1,
         *           "isCollapsed": false,
         *           "node_id": "node_id:0",
         *           "node_name": "start",
         *           "position": {
         *             "x": 100,
         *             "y": 300
         *           },
         *           "sourcePosition": "right",
         *           "targetPosition": "left",
         *           "type": "start"
         *         },
         *         {
         *           "agent_my_page_id": 1,
         *           "connectedTo": [
         *             "end"
         *           ],
         *           "connections": 1,
         *           "isCollapsed": false,
         *           "node_id": "node_id:1",
         *           "node_name": "agent_0",
         *           "position": {
         *             "x": 200,
         *             "y": 300
         *           },
         *           "sourcePosition": "right",
         *           "targetPosition": "left",
         *           "type": "agent"
         *         },
         *         {
         *           "connectedTo": [],
         *           "connections": 0,
         *           "isCollapsed": false,
         *           "node_id": "node_id:2",
         *           "node_name": "end",
         *           "position": {
         *             "x": 300,
         *             "y": 300
         *           },
         *           "sourcePosition": "right",
         *           "targetPosition": "left",
         *           "type": "end"
         *         }
         *       ],
         *       "user_id": "user123"
         *     }
         */
        NodeDataRequest: {
            /**
             * User Id
             * @description User ID (int or str)
             */
            user_id: number | string;
            /**
             * Agt Scenarios Data Id
             * @description ID from agt_scenarios_data table
             */
            agt_scenarios_data_id: number;
            /**
             * Is Deep Agent Architecture
             * @description deep agent architecture? True: True, False: False
             * @default false
             */
            is_deep_agent_architecture: boolean;
            /**
             * Nodes
             * @description Node list (single or multiple)
             */
            nodes: components["schemas"]["NodeItem"][];
        };
        /**
         * NodeDataResponse
         * @description GET, POST, PUT, PATCH - node response (actual output structure)
         * @example {
         *       "agt_scenarios_data_id": 1,
         *       "created_at": "2024-12-19T10:00:00Z",
         *       "nodes": [
         *         {
         *           "agent_my_page_id": 999,
         *           "connectedTo": [
         *             "agent_0"
         *           ],
         *           "connections": 1,
         *           "isCollapsed": false,
         *           "node_id": "node_id:1",
         *           "node_name": "start_node",
         *           "position": {
         *             "x": 100,
         *             "y": 300
         *           },
         *           "sourcePosition": "right",
         *           "targetPosition": "left",
         *           "type": "start"
         *         }
         *       ],
         *       "total_count": 2,
         *       "updated_at": "2024-12-19T10:00:00Z",
         *       "user_id": "user123"
         *     }
         */
        NodeDataResponse: {
            /**
             * User Id
             * @description User ID (always returned as string)
             */
            user_id: string;
            /**
             * Agt Scenarios Data Id
             * @description ID from agt_scenarios_data table
             */
            agt_scenarios_data_id: number;
            /**
             * Total Count
             * @description Total node count
             */
            total_count: number;
            /**
             * Nodes
             * @description Node list
             */
            nodes: components["schemas"]["NodeItem"][];
            /**
             * Created At
             * @description Creation timestamp
             */
            created_at?: string | null;
            /**
             * Updated At
             * @description Last update timestamp
             */
            updated_at?: string | null;
        };
        /**
         * NodeDataScenarioUpdateRequest
         * @description PATCH /scenario/{id} - scenario node partial update request DTO
         */
        NodeDataScenarioUpdateRequest: {
            /**
             * User Id
             * @description User ID (int or str)
             */
            user_id: number | string;
            /**
             * Agt Scenarios Data Id
             * @description ID from agt_scenarios_data table
             */
            agt_scenarios_data_id: number;
            /**
             * Is Deep Agent Architecture
             * @description deep agent architecture? True: True, False: False
             */
            is_deep_agent_architecture?: boolean | null;
            /**
             * Nodes
             * @description List of nodes to be partially updated
             */
            nodes: components["schemas"]["NodeItemPartialUpdate"][];
        };
        /**
         * NodeDataUpdateRequest
         * @description PATCH - node partial update (actual input structure)
         */
        NodeDataUpdateRequest: {
            /**
             * User Id
             * @description User ID (int or str)
             */
            user_id?: number | string | null;
            /**
             * Agt Scenarios Data Id
             * @description ID from agt_scenarios_data table
             */
            agt_scenarios_data_id?: number | null;
            /**
             * Is Deep Agent Architecture
             * @description deep agent architecture? True: True, False: False
             */
            is_deep_agent_architecture?: boolean | null;
            /**
             * Nodes
             * @description Node list (nodes to be modified)
             */
            nodes?: components["schemas"]["NodeItem"][] | null;
        };
        /**
         * NodeItem
         * @description Node item in actual input structure
         * @example {
         *       "agent_my_page_id": 999,
         *       "connectedTo": [
         *         "agent_0"
         *       ],
         *       "connections": 1,
         *       "isCollapsed": false,
         *       "node_id": "node_id:1",
         *       "node_name": "start_node",
         *       "position": {
         *         "x": 100,
         *         "y": 300
         *       },
         *       "sourcePosition": "right",
         *       "targetPosition": "left",
         *       "type": "start"
         *     }
         */
        NodeItem: {
            /**
             * Node Id
             * @description Node ID (ex: node_id:1)
             */
            node_id: string;
            /**
             * Type
             * @description Node type (start | agent | end | agent_0)
             */
            type: string;
            /**
             * Position
             * @description Screen position {x: int, y: int}
             */
            position: {
                [key: string]: number | null;
            };
            /**
             * Sourceposition
             * @description source position
             */
            sourcePosition?: string | null;
            /**
             * Targetposition
             * @description target position
             */
            targetPosition?: string | null;
            /**
             * Agent My Page Id
             * @description ID from agt_agent_my_page table
             */
            agent_my_page_id?: number | null;
            /**
             * Iscollapsed
             * @description Whether node popup is collapsed
             * @default false
             */
            isCollapsed: boolean;
            /**
             * Node Name
             * @description Node name (ex: agent_0)
             */
            node_name?: string | null;
            /**
             * Connections
             * @description Number of connections
             */
            connections?: number | null;
            /**
             * Connectedto
             * @description Array of connected node IDs
             * @default []
             */
            connectedTo: string[];
        };
        /**
         * NodeItemPartialUpdate
         * @description PATCH /scenario/{id} - individual node partial update DTO
         */
        NodeItemPartialUpdate: {
            /**
             * Node Id
             * @description ID of the node to be modified
             */
            node_id: string;
            /**
             * Type
             * @description Node type (start | agent | end | agent_0)
             */
            type?: string | null;
            /**
             * Position
             * @description Screen position {x: int, y: int}
             */
            position?: {
                [key: string]: number | null;
            } | null;
            /**
             * Sourceposition
             * @description source position
             */
            sourcePosition?: string | null;
            /**
             * Targetposition
             * @description target position
             */
            targetPosition?: string | null;
            /**
             * Agent My Page Id
             * @description ID from agt_agent_my_page table
             */
            agent_my_page_id?: number | null;
            /**
             * Iscollapsed
             * @description Whether node popup is collapsed
             */
            isCollapsed?: boolean | null;
            /**
             * Node Name
             * @description Node name (ex: agent_0)
             */
            node_name?: string | null;
            /**
             * Connections
             * @description Number of connections
             */
            connections?: number | null;
            /**
             * Connectedto
             * @description Array of connected node IDs
             */
            connectedTo?: string[] | null;
            /**
             * Is Deep Agent Architecture
             * @description deep agent architecture? True: True, False: False
             */
            is_deep_agent_architecture?: boolean | null;
        };
        /**
         * OperationTypeEnum
         * @enum {string}
         */
        OperationTypeEnum: "AND" | "OR";
        /**
         * PaginatedChatResponseDTO
         * @description Paginated Chat Response DTO (includes token summary and optional performance metrics)
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedChatResponseDTO: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["ChatResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
            /** @description Token usage summary */
            token_summary?: components["schemas"]["TokenSummaryDTO"] | null;
            /** @description Performance metrics (optional) */
            performance_metrics?: components["schemas"]["PerformanceMetricsDTO"] | null;
        };
        /**
         * PaginatedResponseDTO[AgentDataResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_AgentDataResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["AgentDataResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[AgentRoleResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_AgentRoleResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["AgentRoleResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[ApiPermissionResponseDTO]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_ApiPermissionResponseDTO_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["ApiPermissionResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[EdgeDataMyPageResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_EdgeDataMyPageResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["EdgeDataMyPageResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[EdgeDataResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_EdgeDataResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["EdgeDataResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[HistoryMemoryConfigResponseDTO]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_HistoryMemoryConfigResponseDTO_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["HistoryMemoryConfigResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[HistoryMemoryScenarioResponseDTO]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_HistoryMemoryScenarioResponseDTO_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["HistoryMemoryScenarioResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[HistoryResponseDTO]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_HistoryResponseDTO_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["HistoryResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[MemorySettingResponseDTO]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_MemorySettingResponseDTO_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["MemorySettingResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[MyPageAgentResponseWithScenarios]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_MyPageAgentResponseWithScenarios_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["MyPageAgentResponseWithScenarios"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[MyPagePersonaResponseWithConnections]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_MyPagePersonaResponseWithConnections_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["MyPagePersonaResponseWithConnections"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[MyPageScenarioResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_MyPageScenarioResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["MyPageScenarioResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[NodeDataMyPageResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_NodeDataMyPageResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["NodeDataMyPageResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[NodeDataResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_NodeDataResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["NodeDataResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[PersonaDataResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_PersonaDataResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["PersonaDataResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[PersonaDataRuntimeResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_PersonaDataRuntimeResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["PersonaDataRuntimeResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[PersonaModelResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_PersonaModelResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["PersonaModelResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[PersonaRoleResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_PersonaRoleResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["PersonaRoleResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[PersonaRuntimeResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_PersonaRuntimeResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["PersonaRuntimeResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[ScenarioDataResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_ScenarioDataResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["ScenarioDataResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[ScenarioRoleResponse]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_ScenarioRoleResponse_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["ScenarioRoleResponse"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[TitleResponseDTO]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_TitleResponseDTO_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["TitleResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PaginatedResponseDTO[WebSocketKeyResponseDTO]
         * @example {
         *       "items": [
         *         {
         *           "id": 1,
         *           "name": "Item 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Item 2"
         *         }
         *       ],
         *       "page": 1,
         *       "size": 10,
         *       "total": 25,
         *       "total_pages": 3
         *     }
         */
        PaginatedResponseDTO_WebSocketKeyResponseDTO_: {
            /**
             * Items
             * @description Page data
             */
            items: components["schemas"]["WebSocketKeyResponseDTO"][];
            /**
             * Total
             * @description Total data count
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Size
             * @description Page size
             */
            size: number;
            /**
             * Total Pages
             * @description Total pages
             */
            total_pages: number;
        };
        /**
         * PerformanceMetricsDTO
         * @description LangSmith-style performance metrics DTO
         * @example {
         *       "avg_step_latency_ms": 205.76,
         *       "checkpoint_count": 7,
         *       "error_count": 1,
         *       "performance_grade": "B - Good",
         *       "retry_count": 2,
         *       "step_latencies": [
         *         {
         *           "latency_ms": 100,
         *           "source": "input",
         *           "step": 0,
         *           "timestamp": "2024-01-01T00:00:00"
         *         }
         *       ],
         *       "success_rate": 0.95,
         *       "total_latency_ms": 1234.56
         *     }
         */
        PerformanceMetricsDTO: {
            /**
             * Total Latency Ms
             * @description Total execution latency in milliseconds
             */
            total_latency_ms: number;
            /**
             * Avg Step Latency Ms
             * @description Average step latency in milliseconds
             */
            avg_step_latency_ms: number;
            /**
             * Step Latencies
             * @description Individual step latencies
             */
            step_latencies?: components["schemas"]["StepLatencyDTO"][];
            /**
             * Success Rate
             * @description Success rate (0.0-1.0)
             */
            success_rate: number;
            /**
             * Error Count
             * @description Total number of errors
             */
            error_count: number;
            /**
             * Retry Count
             * @description Total number of retries
             */
            retry_count: number;
            /**
             * Checkpoint Count
             * @description Total number of checkpoints
             */
            checkpoint_count: number;
            /**
             * Errors
             * @description Errors by checkpoint
             */
            errors?: components["schemas"]["CheckpointErrorDTO"][][] | null;
            /**
             * Performance Grade
             * @description Performance grade (A-F)
             */
            performance_grade?: string | null;
        };
        /**
         * PeriodDTO
         * @description Query period information DTO
         */
        PeriodDTO: {
            /**
             * Startdate
             * @description Start date (ISO 8601)
             */
            startDate: string;
            /**
             * Enddate
             * @description End date (ISO 8601)
             */
            endDate: string;
            /**
             * Granularity
             * @description Time series unit
             */
            granularity: string;
        };
        /**
         * PersonaCategoryEnum
         * @enum {string}
         */
        PersonaCategoryEnum: "IT" | "Medical" | "Education" | "Finance" | "Marketing" | "Art" | "Engineering" | "Legal" | "Science" | "Sports" | "Environment" | "Media" | "Culinary" | "Politics" | "Psychology" | "Fashion" | "Travel" | "Agriculture" | "Gaming" | "Automotive" | "CUSTOM";
        /**
         * PersonaDataCreateRequest
         * @example {
         *       "category": "IT",
         *       "description": "AI assistant specialized in Python programming and web development, providing code reviews and technical consulting.",
         *       "is_public": false,
         *       "is_system": false,
         *       "name": "Python Development Expert",
         *       "system_prompt": "<ROLE>You are a Python development expert with 10 years of experience.</ROLE><INSTRUCTIONS>Analyze user's Python code and suggest improvements. Provide clear and practical advice.</INSTRUCTIONS>",
         *       "user_id": "user123",
         *       "user_persona_description": "Dedicated helper reflecting our team's Python development standards and best practices",
         *       "user_persona_title": "Team Python Mentor"
         *     }
         */
        PersonaDataCreateRequest: {
            /**
             * User Id
             * @description ID of the user who created the persona (owner)
             */
            user_id: string;
            /**
             * @description Persona expertise category (IT, Business, Education, Creative, etc.)
             * @default CUSTOM
             */
            category: components["schemas"]["PersonaCategoryEnum"];
            /**
             * Name
             * @description Official persona name (displayed to other users)
             */
            name: string;
            /**
             * Description
             * @description Official information describing the persona's purpose and expertise
             */
            description: string;
            /**
             * System Prompt
             * @description System prompt passed to AI model (core definition of persona)
             */
            system_prompt: string;
            /**
             * User Persona Title
             * @description Persona title for owner's personal use
             */
            user_persona_title?: string | null;
            /**
             * User Persona Description
             * @description Owner's personal persona description and notes
             */
            user_persona_description?: string | null;
            /**
             * Is System
             * @description Whether system-provided persona (only admins can set True)
             * @default false
             */
            is_system: boolean;
            /**
             * Is Public
             * @description Whether public to other users
             * @default false
             */
            is_public: boolean;
        };
        /**
         * PersonaDataResponse
         * @example {
         *       "category": "IT",
         *       "created_at": "2025-12-31T00:00:00",
         *       "description": "AI assistant specialized in Python programming and web development, providing code reviews and technical consulting.",
         *       "id": 1,
         *       "is_public": false,
         *       "is_system": false,
         *       "name": "Python Development Expert",
         *       "system_prompt": "<ROLE>You are a Python development expert with 10 years of experience.</ROLE><INSTRUCTIONS>Analyze user's Python code and suggest improvements. Provide clear and practical advice.</INSTRUCTIONS>",
         *       "updated_at": "2025-12-31T00:00:00",
         *       "user_id": "user123",
         *       "user_persona_description": "Dedicated helper reflecting our team's Python development standards and best practices",
         *       "user_persona_title": "Team Python Mentor"
         *     }
         */
        PersonaDataResponse: {
            /**
             * Id
             * @description Persona unique identifier (PK)
             */
            id: number;
            /**
             * User Id
             * @description Owner user ID who created the persona
             */
            user_id: string;
            /** @description Persona expertise category */
            category: components["schemas"]["PersonaCategoryEnum"];
            /**
             * Name
             * @description Official persona name
             */
            name: string;
            /**
             * Description
             * @description Official persona description and purpose
             */
            description: string;
            /**
             * System Prompt
             * @description System prompt passed to AI model
             */
            system_prompt: string;
            /**
             * User Persona Title
             * @description Personal title set by owner
             */
            user_persona_title?: string | null;
            /**
             * User Persona Description
             * @description Personal description and notes written by owner
             */
            user_persona_description?: string | null;
            /**
             * Is System
             * @description Whether system-provided persona (admin managed)
             */
            is_system: boolean;
            /**
             * Is Public
             * @description Whether persona is public to other users
             */
            is_public: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Persona creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Persona last update time
             */
            updated_at: string;
        };
        /**
         * PersonaDataRuntimeCreateRequest
         * @example {
         *       "persona_data_id": 1,
         *       "persona_runtime_id": 1
         *     }
         */
        PersonaDataRuntimeCreateRequest: {
            /**
             * Persona Data Id
             * @description Original persona ID
             */
            persona_data_id: number;
            /**
             * Persona Runtime Id
             * @description Runtime ID
             */
            persona_runtime_id: number;
        };
        /** PersonaDataRuntimeResponse */
        PersonaDataRuntimeResponse: {
            /**
             * Id
             * @description Unique identifier (PK)
             */
            id: number;
            /**
             * Persona Data Id
             * @description Original persona ID
             */
            persona_data_id: number;
            /**
             * Persona Runtime Id
             * @description Runtime ID
             */
            persona_runtime_id: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Update time
             */
            updated_at: string;
        };
        /** PersonaDataRuntimeUpdateRequest */
        PersonaDataRuntimeUpdateRequest: {
            /**
             * Persona Data Id
             * @description Original persona ID
             */
            persona_data_id?: number | null;
            /**
             * Persona Runtime Id
             * @description Runtime ID
             */
            persona_runtime_id?: number | null;
        };
        /**
         * PersonaDataUpdateRequest
         * @example {
         *       "category": "IT",
         *       "description": "AI assistant specialized in Python programming and web development, providing code reviews and technical consulting.",
         *       "is_public": false,
         *       "is_system": false,
         *       "name": "Python Development Expert",
         *       "system_prompt": "<ROLE>You are a Python development expert with 10 years of experience.</ROLE><INSTRUCTIONS>Analyze user's Python code and suggest improvements. Provide clear and practical advice.</INSTRUCTIONS>",
         *       "user_persona_description": "Dedicated helper reflecting our team's Python development standards and best practices",
         *       "user_persona_title": "Team Python Mentor"
         *     }
         */
        PersonaDataUpdateRequest: {
            /** @description Persona expertise category */
            category?: components["schemas"]["PersonaCategoryEnum"] | null;
            /**
             * Name
             * @description Official persona name
             */
            name?: string | null;
            /**
             * Description
             * @description Official persona description
             */
            description?: string | null;
            /**
             * System Prompt
             * @description System prompt to update
             */
            system_prompt?: string | null;
            /**
             * User Persona Title
             * @description Personal title to update
             */
            user_persona_title?: string | null;
            /**
             * User Persona Description
             * @description Personal description to update
             */
            user_persona_description?: string | null;
            /**
             * Is System
             * @description Change system-provided persona status
             */
            is_system?: boolean | null;
            /**
             * Is Public
             * @description Change public status
             */
            is_public?: boolean | null;
        };
        /**
         * PersonaLLMGenerationRequest
         * @example {
         *       "category": "IT",
         *       "description": "Friendly mentor for React.js beginners, providing explanations with practical examples and code reviews.",
         *       "name": "React.js Development Mentor",
         *       "user_id": "user123"
         *     }
         */
        PersonaLLMGenerationRequest: {
            /**
             * User Id
             * @description Owner user ID to create persona
             */
            user_id: string;
            /**
             * @description Expertise category for AI reference (affects generation style)
             * @default CUSTOM
             */
            category: components["schemas"]["PersonaCategoryEnum"];
            /**
             * Name
             * @description Desired persona name (used by AI for role definition)
             */
            name: string;
            /**
             * Description
             * @description Description of persona's role and purpose (used by AI for prompt generation)
             */
            description: string;
        };
        /**
         * PersonaModelCreateRequest
         * @description Persona model creation request DTO
         * @example {
         *       "my_page_model_id": "model_456",
         *       "user_id": "user123"
         *     }
         */
        PersonaModelCreateRequest: {
            /**
             * User Id
             * @description ID of persona creation owner
             */
            user_id: string;
            /**
             * My Page Model Id
             * @description Model creating persona: my_page_model_id
             */
            my_page_model_id: string;
        };
        /**
         * PersonaModelResponse
         * @description Persona model response DTO
         * @example {
         *       "created_at": "2025-12-31T00:00:00",
         *       "id": 1,
         *       "my_page_model_id": "model_456",
         *       "updated_at": "2025-12-31T00:00:00",
         *       "user_id": "user123"
         *     }
         */
        PersonaModelResponse: {
            /**
             * Id
             * @description Persona model record unique identifier (PK)
             */
            id: number;
            /**
             * User Id
             * @description ID of persona creation owner
             */
            user_id: string;
            /**
             * My Page Model Id
             * @description Model creating persona: my_page_model_id
             */
            my_page_model_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Record creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Record last update time
             */
            updated_at: string;
        };
        /**
         * PersonaModelUpdateRequest
         * @description Persona model update request DTO
         * @example {
         *       "my_page_model_id": "model_789"
         *     }
         */
        PersonaModelUpdateRequest: {
            /**
             * My Page Model Id
             * @description Persona creation model ID to update
             */
            my_page_model_id?: string | null;
        };
        /**
         * PersonaRoleCreateRequest
         * @example {
         *       "persona_data_id": 10,
         *       "role_id": 2
         *     }
         */
        PersonaRoleCreateRequest: {
            /**
             * Persona Data Id
             * @description Original persona ID to share (PersonaDataEntity reference)
             */
            persona_data_id: number;
            /**
             * Role Id
             * @description Role ID to grant access
             */
            role_id: number;
        };
        /**
         * PersonaRoleResponse
         * @example {
         *       "created_at": "2025-12-31T00:00:00",
         *       "id": 1,
         *       "persona_data_id": 10,
         *       "role_id": 2,
         *       "updated_at": "2025-12-31T00:00:00"
         *     }
         */
        PersonaRoleResponse: {
            /**
             * Id
             * @description Permission mapping record unique identifier (PK)
             */
            id: number;
            /**
             * Persona Data Id
             * @description Shared persona original ID (PersonaDataEntity reference)
             */
            persona_data_id: number;
            /**
             * Role Id
             * @description Role ID with granted access
             */
            role_id: number;
            /**
             * Created At
             * Format: date-time
             * @description Time when permission was first granted
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Time when permission setting was last updated
             */
            updated_at: string;
        };
        /**
         * PersonaRoleUpdateRequest
         * @example {
         *       "persona_data_id": 10,
         *       "role_id": 2
         *     }
         */
        PersonaRoleUpdateRequest: {
            /**
             * Persona Data Id
             * @description Original persona ID to share (PersonaDataEntity reference)
             */
            persona_data_id?: number | null;
            /**
             * Role Id
             * @description New role ID to change
             */
            role_id?: number | null;
        };
        /**
         * PersonaRuntimeCreateRequest
         * @example {
         *       "runnable_config": [
         *         "user_id",
         *         "thread_id"
         *       ],
         *       "system_prompt": "You are an enterprise chatbot designed to assist with workplace tasks. You can query and organize information using MS Graph API based on user requests, including user profiles and organizational charts, calendar and meeting information, email and message retrieval, SharePoint document search, Teams channel and conversation data, and OneDrive file access.\nUse the provided user ID and thread ID to call MS Graph API tools and return results in a clear and concise format. Always provide accurate information only, comply with privacy protection requirements, organize responses in a simple and understandable manner, and clearly indicate when access to certain information is restricted.\nCurrent session information: User ID: <user_id>{user_id}</user_id> Thread ID: <thread_id>{thread_id}</thread_id>"
         *     }
         */
        PersonaRuntimeCreateRequest: {
            /**
             * Runnable Config
             * @description RunnableConfig key value list
             */
            runnable_config?: string[] | null;
            /**
             * System Prompt
             * @description Persona system prompt
             */
            system_prompt: string;
        };
        /** PersonaRuntimeResponse */
        PersonaRuntimeResponse: {
            /**
             * Id
             * @description Runtime unique identifier (PK)
             */
            id: number;
            /**
             * Runnable Config
             * @description RunnableConfig key value list
             */
            runnable_config?: string[] | null;
            /**
             * System Prompt
             * @description Persona system prompt
             */
            system_prompt: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Update time
             */
            updated_at: string;
        };
        /** PersonaRuntimeUpdateRequest */
        PersonaRuntimeUpdateRequest: {
            /**
             * Runnable Config
             * @description RunnableConfig key value list
             */
            runnable_config?: string[] | null;
            /**
             * System Prompt
             * @description Persona system prompt
             */
            system_prompt?: string | null;
        };
        /**
         * SSEInputDTO
         * @description SSE message DTO sent from client to server
         */
        SSEInputDTO: {
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             * @example 123123123124
             */
            scenario_my_page_id: number;
            /**
             * User Id
             * @description User ID
             * @example 123123123124454
             */
            user_id: string;
            /**
             * Thread Id
             * @description Conversation flow distinction ID (Text)
             * @example 123123123124890790
             */
            thread_id: string;
            /**
             * Qa Id
             * @description Question-answer unit ID (Text)
             * @example 123123123124234234
             */
            qa_id: string;
            /**
             * Message
             * @description Message entered by user (can be text, list for Claude multi-turn, or dict for structured input)
             * @example What is the capital of South Korea?
             * @example [
             *       {
             *         "text": "Hello",
             *         "type": "text"
             *       }
             *     ]
             */
            message: string | unknown[] | {
                [key: string]: unknown;
            };
            /**
             * Attachments
             * @description Attachment file URL list (images, PDF, audio, etc. - optional)
             * @example [
             *       "https://example.com/image.jpg",
             *       "https://example.com/document.pdf",
             *       "https://example.com/audio.wav"
             *     ]
             */
            attachments?: string[] | null;
        };
        /**
         * ScenarioBreakdownDTO
         * @description Scenario-specific token usage analysis DTO
         */
        ScenarioBreakdownDTO: {
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * User My Scenario Title
             * @description User-defined scenario title
             */
            user_my_scenario_title: string;
            /**
             * Input Tokens
             * @description Number of input tokens
             */
            input_tokens: number;
            /**
             * Output Tokens
             * @description Number of output tokens
             */
            output_tokens: number;
            /**
             * Total Tokens
             * @description Total number of tokens
             */
            total_tokens: number;
        };
        /**
         * ScenarioCategoryEnum
         * @description Scenario category
         * @enum {string}
         */
        ScenarioCategoryEnum: "CHATBOT" | "MULTI_AGENT_SYSTEM" | "REFLECTION_CRITIQUE" | "PLANNING_AGENT" | "DATABASE" | "EVALUATION" | "EXPERIMENTAL";
        /**
         * ScenarioDataCreateRequest
         * @description Scenario master data creation request
         * @example {
         *       "category": "CHATBOT",
         *       "definition_name": "react",
         *       "description": "AI chatbot scenario for conversing with users",
         *       "is_public": true,
         *       "is_system": false,
         *       "name": "AI Chatbot Scenario",
         *       "user_id": "user123",
         *       "user_scenario_description": "Chatbot scenario for personal projects",
         *       "user_scenario_title": "My Personal Chatbot"
         *     }
         */
        ScenarioDataCreateRequest: {
            /**
             * User Id
             * @description Owner user ID
             */
            user_id: string;
            /** @default CHATBOT */
            category: components["schemas"]["ScenarioCategoryEnum"];
            /**
             * Name
             * @description Official name of the scenario
             */
            name: string;
            /**
             * Description
             * @description Official description of the scenario
             */
            description: string;
            /**
             * Definition Name
             * @description Function name that implements the scenario
             */
            definition_name: string;
            /**
             * User Scenario Title
             * @description User-defined scenario title
             */
            user_scenario_title?: string | null;
            /**
             * User Scenario Description
             * @description User-defined scenario description
             */
            user_scenario_description?: string | null;
            /**
             * Is System
             * @description Whether this is a system-provided scenario
             * @default false
             */
            is_system: boolean;
            /**
             * Is Public
             * @description Whether this is a public scenario
             * @default false
             */
            is_public: boolean;
        };
        /**
         * ScenarioDataResponse
         * @description Scenario master data query response
         */
        ScenarioDataResponse: {
            /**
             * Id
             * @description Unique scenario ID
             */
            id: number;
            /**
             * User Id
             * @description Owner user ID
             */
            user_id: string;
            category: components["schemas"]["ScenarioCategoryEnum"];
            /**
             * Name
             * @description Official scenario name
             */
            name: string;
            /**
             * Description
             * @description Official scenario description
             */
            description: string;
            /**
             * Definition Name
             * @description Function name that implements the scenario
             */
            definition_name: string;
            /**
             * User Scenario Title
             * @description User-defined scenario title
             */
            user_scenario_title?: string | null;
            /**
             * User Scenario Description
             * @description User-defined scenario description
             */
            user_scenario_description?: string | null;
            /**
             * Is System
             * @description Whether system-provided scenario
             */
            is_system: boolean;
            /**
             * Is Public
             * @description Whether public scenario
             */
            is_public: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Creation time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Update time
             */
            updated_at: string;
        };
        /**
         * ScenarioDataUpdateRequest
         * @description Scenario master data update request (supports partial updates)
         */
        ScenarioDataUpdateRequest: {
            /** @description Scenario category */
            category?: components["schemas"]["ScenarioCategoryEnum"] | null;
            /**
             * Name
             * @description Official name of the scenario
             */
            name?: string | null;
            /**
             * Description
             * @description Official description of the scenario
             */
            description?: string | null;
            /**
             * Definition Name
             * @description Function name that implements the scenario
             */
            definition_name?: string | null;
            /**
             * User Scenario Title
             * @description User-defined scenario title
             */
            user_scenario_title?: string | null;
            /**
             * User Scenario Description
             * @description User-defined scenario description
             */
            user_scenario_description?: string | null;
            /**
             * Is Public
             * @description Whether this is a public scenario
             */
            is_public?: boolean | null;
        };
        /**
         * ScenarioPeriodDTO
         * @description Query period information DTO
         */
        ScenarioPeriodDTO: {
            /**
             * Start Date
             * @description Start date (ISO 8601)
             */
            start_date: string;
            /**
             * End Date
             * @description End date (ISO 8601)
             */
            end_date: string;
        };
        /**
         * ScenarioRoleCreateRequest
         * @description Scenario role permission addition request
         * @example {
         *       "role_id": 2,
         *       "scenario_data_id": 5
         *     }
         */
        ScenarioRoleCreateRequest: {
            /**
             * Scenario Data Id
             * @description Scenario data ID
             */
            scenario_data_id: number;
            /**
             * Role Id
             * @description Target role/permission ID for sharing
             */
            role_id: number;
        };
        /**
         * ScenarioRoleResponse
         * @description Scenario role permission query response
         * @example {
         *       "created_at": "2024-01-01T00:00:00",
         *       "id": 1,
         *       "role_id": 2,
         *       "scenario_data_id": 5,
         *       "updated_at": "2024-01-01T00:00:00"
         *     }
         */
        ScenarioRoleResponse: {
            /**
             * Id
             * @description Permission mapping record ID
             */
            id: number;
            /**
             * Scenario Data Id
             * @description Scenario data ID
             */
            scenario_data_id: number;
            /**
             * Role Id
             * @description Target role/permission ID for sharing
             */
            role_id: number;
            /**
             * Created At
             * Format: date-time
             * @description Permission grant time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Permission modification time
             */
            updated_at: string;
        };
        /**
         * ScenarioRoleUpdateRequest
         * @description Scenario role permission update request
         * @example {
         *       "role_id": 2,
         *       "scenario_data_id": 5
         *     }
         */
        ScenarioRoleUpdateRequest: {
            /**
             * Scenario Data Id
             * @description Scenario data ID
             */
            scenario_data_id?: number | null;
            /**
             * Role Id
             * @description Role/permission ID to change
             */
            role_id?: number | null;
        };
        /**
         * ScenarioUsageRequestDTO
         * @description Scenario usage inquiry request DTO
         * @example {
         *       "end_date": "2025-12-31",
         *       "scenario_my_page_id": 1,
         *       "start_date": "2025-01-01",
         *       "user_id": "Dr.Lee"
         *     }
         */
        ScenarioUsageRequestDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID (optional)
             */
            scenario_my_page_id?: number | null;
            /**
             * Start Date
             * @description Query start date (YYYY-MM-DD)
             */
            start_date?: string | null;
            /**
             * End Date
             * @description Query end date (YYYY-MM-DD)
             */
            end_date?: string | null;
        };
        /**
         * ScenarioUsageResponseDTO
         * @description Scenario usage response DTO (all scenarios)
         * @example {
         *       "period": {
         *         "end_date": "2025-12-31T23:59:59Z",
         *         "start_date": "2025-01-01T00:00:00Z"
         *       },
         *       "scenario_breakdown": [
         *         {
         *           "input_tokens": 50000,
         *           "output_tokens": 25000,
         *           "scenario_my_page_id": 1,
         *           "total_tokens": 75000,
         *           "user_my_scenario_title": "Scenario A"
         *         }
         *       ],
         *       "total_token_usage": {
         *         "input_tokens": 150000,
         *         "output_tokens": 75000,
         *         "total_tokens": 225000
         *       },
         *       "user_id": "Dr.Lee"
         *     }
         */
        ScenarioUsageResponseDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /** @description Total token usage */
            total_token_usage: components["schemas"]["TokenUsageDTO"];
            /**
             * Scenario Breakdown
             * @description Scenario-specific usage analysis
             */
            scenario_breakdown: components["schemas"]["ScenarioBreakdownDTO"][];
            /** @description Query period */
            period: components["schemas"]["ScenarioPeriodDTO"];
        };
        /**
         * SingleScenarioUsageResponseDTO
         * @description Scenario usage response DTO (single scenario)
         * @example {
         *       "period": {
         *         "end_date": "2025-12-31T23:59:59Z",
         *         "start_date": "2025-01-01T00:00:00Z"
         *       },
         *       "scenario_my_page_id": 3,
         *       "token_usage": {
         *         "input_tokens": 40000,
         *         "output_tokens": 20000,
         *         "total_tokens": 60000
         *       },
         *       "user_id": "Dr.Lee",
         *       "user_my_scenario_title": "Scenario C"
         *     }
         */
        SingleScenarioUsageResponseDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * User My Scenario Title
             * @description User-defined scenario title
             */
            user_my_scenario_title: string;
            /** @description Token usage */
            token_usage: components["schemas"]["TokenUsageDTO"];
            /** @description Query period */
            period: components["schemas"]["ScenarioPeriodDTO"];
        };
        /**
         * SortOrderEnum
         * @enum {string}
         */
        SortOrderEnum: "ASC" | "DESC";
        /**
         * StepLatencyDTO
         * @description 단계별 지연시간 정보
         */
        StepLatencyDTO: {
            /**
             * Step
             * @description Step number
             */
            step: number;
            /**
             * Source
             * @description Checkpoint source (input/loop/final)
             */
            source: string;
            /**
             * Latency Ms
             * @description Latency in milliseconds
             */
            latency_ms: number;
            /**
             * Timestamp
             * @description Step timestamp (ISO format)
             */
            timestamp: string;
        };
        /**
         * TitleCreateDTO
         * @description Title creation DTO
         */
        TitleCreateDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
            /**
             * Message
             * @description Message
             */
            message: string;
            /**
             * Title
             * @description Title
             */
            title: string;
            /**
             * Is Flag
             * @description Flag status
             * @default false
             */
            is_flag: boolean | null;
        };
        /**
         * TitlePatchDTO
         * @description Title partial update DTO (only title modification)
         */
        TitlePatchDTO: {
            /**
             * Title
             * @description Title to update
             */
            title?: string | null;
            /**
             * Is Flag
             * @description Flag status to update
             */
            is_flag?: boolean | null;
        };
        /**
         * TitleResponseDTO
         * @description Title response DTO
         */
        TitleResponseDTO: {
            /**
             * Id
             * @description ID
             */
            id: number;
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
            /**
             * Message
             * @description Message
             */
            message: string;
            /**
             * Title
             * @description Title
             */
            title: string;
            /**
             * Is Flag
             * @description Flag status
             */
            is_flag?: boolean | null;
            /**
             * Created At
             * Format: date-time
             * @description Created at
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Updated at
             */
            updated_at: string;
        };
        /**
         * TitleServiceDTO
         * @description Title service DTO
         */
        TitleServiceDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id: number;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
            /**
             * Message
             * @description Message
             */
            message: string;
        };
        /**
         * TitleSortOrderEnum
         * @enum {string}
         */
        TitleSortOrderEnum: "ASC" | "DESC";
        /**
         * TokenSummaryDTO
         * @description Token Usage Summary DTO
         * @example {
         *       "duplicate_messages": 3,
         *       "input_tokens": 586,
         *       "original_messages": 1,
         *       "output_tokens": 28,
         *       "total_messages": 7,
         *       "total_tokens": 614
         *     }
         */
        TokenSummaryDTO: {
            /**
             * Total Tokens
             * @description Total token count (deduplicated)
             */
            total_tokens: number;
            /**
             * Input Tokens
             * @description Input token count (deduplicated)
             */
            input_tokens: number;
            /**
             * Output Tokens
             * @description Output token count (deduplicated)
             */
            output_tokens: number;
            /**
             * Total Messages
             * @description Total message count
             */
            total_messages: number;
            /**
             * Original Messages
             * @description Original message count
             */
            original_messages: number;
            /**
             * Duplicate Messages
             * @description Duplicate message count
             */
            duplicate_messages: number;
        };
        /**
         * TokenUsageDTO
         * @description Token usage DTO
         */
        TokenUsageDTO: {
            /**
             * Input Tokens
             * @description Number of input tokens
             */
            input_tokens: number;
            /**
             * Output Tokens
             * @description Number of output tokens
             */
            output_tokens: number;
            /**
             * Total Tokens
             * @description Total number of tokens
             */
            total_tokens: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * WebSocketKeyCreateDTO
         * @description WebSocketKey creation DTO
         */
        WebSocketKeyCreateDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id?: number | null;
        };
        /**
         * WebSocketKeyCreateWithThreadIdDTO
         * @description WebSocketKey creation DTO with thread_id
         */
        WebSocketKeyCreateWithThreadIdDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id?: number | null;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
        };
        /**
         * WebSocketKeyPatchDTO
         * @description WebSocketKey partial update DTO
         */
        WebSocketKeyPatchDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id?: string | null;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id?: number | null;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id?: string | null;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id?: string | null;
        };
        /**
         * WebSocketKeyResponseDTO
         * @description WebSocketKey response DTO
         */
        WebSocketKeyResponseDTO: {
            /**
             * Id
             * @description ID
             */
            id: number;
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id?: number | null;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id: string;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Created at
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Updated at
             */
            updated_at: string;
        };
        /**
         * WebSocketKeySortOrderEnum
         * @enum {string}
         */
        WebSocketKeySortOrderEnum: "ASC" | "DESC";
        /**
         * WebSocketKeyUpdateDTO
         * @description WebSocketKey full update DTO
         */
        WebSocketKeyUpdateDTO: {
            /**
             * User Id
             * @description User ID
             */
            user_id?: string | null;
            /**
             * Scenario My Page Id
             * @description Scenario my page ID
             */
            scenario_my_page_id?: number | null;
            /**
             * Thread Id
             * @description Thread ID (Text)
             */
            thread_id?: string | null;
            /**
             * Qa Id
             * @description QA ID (Text)
             */
            qa_id?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_scenario_data_v1_scenarios_data_get: {
        parameters: {
            query?: {
                /** @description 시나리오 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 카테고리 목록 필터 */
                category?: components["schemas"]["ScenarioCategoryEnum"][] | null;
                /** @description 공식 이름 키워드 검색 */
                name?: string | null;
                /** @description 공식 설명 키워드 검색 */
                description?: string | null;
                /** @description 함수명 키워드 검색 */
                definition_name?: string | null;
                /** @description 유저 제목 키워드 검색 */
                user_scenario_title?: string | null;
                /** @description 유저 설명 키워드 검색 */
                user_scenario_description?: string | null;
                /** @description 시스템 제공 시나리오 필터 */
                is_system?: boolean | null;
                /** @description 공개 시나리오 필터 */
                is_public?: boolean | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_ScenarioDataResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_scenario_data_endpoint_v1_scenarios_data_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioDataCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_data_endpoint_v1_scenarios_data__scenario_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_scenario_data_endpoint_v1_scenarios_data__scenario_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioDataCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_scenario_data_endpoint_v1_scenarios_data__scenario_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_scenario_data_endpoint_v1_scenarios_data__scenario_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioDataUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_my_page_scenarios_v1_scenarios_my_get: {
        parameters: {
            query?: {
                /** @description 마이페이지 항목 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 시나리오 원본 ID 목록 필터 */
                scenario_data_id?: number[] | null;
                /** @description 사용자 별칭 키워드 검색 */
                user_my_scenario_title?: string | null;
                /** @description 사용자 메모 키워드 검색 */
                user_my_scenario_description?: string | null;
                /** @description 즐겨찾기 여부 필터 */
                is_favorite?: boolean | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_MyPageScenarioResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_scenario_to_my_page_endpoint_v1_scenarios_my_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPageScenarioCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageScenarioResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageScenarioResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPageScenarioCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageScenarioResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_my_page_scenario_endpoint_v1_scenarios_my__my_page_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPageScenarioUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageScenarioResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_scenario_roles_v1_scenarios_role_get: {
        parameters: {
            query?: {
                /** @description 권한 매핑 레코드 ID 목록 필터 */
                id?: number[] | null;
                /** @description 시나리오 데이터 ID 목록 필터 */
                scenario_data_id?: number[] | null;
                /** @description 역할/권한 ID 목록 필터 */
                role_id?: number[] | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_ScenarioRoleResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_scenario_role_endpoint_v1_scenarios_role_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioRoleCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_role_endpoint_v1_scenarios_role__role_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_scenario_role_endpoint_v1_scenarios_role__role_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioRoleCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_scenario_role_endpoint_v1_scenarios_role__role_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_scenario_role_endpoint_v1_scenarios_role__role_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioRoleUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generate_persona_with_agent_endpoint_v1_personas_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaLLMGenerationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_persona_data_v1_personas_data_get: {
        parameters: {
            query?: {
                /** @description 페르소나 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 카테고리 목록 필터 */
                category?: components["schemas"]["PersonaCategoryEnum"][] | null;
                /** @description 이름 키워드 검색 */
                name?: string | null;
                /** @description 설명 키워드 검색 */
                description?: string | null;
                /** @description 시스템 프롬프트 키워드 검색 */
                system_prompt?: string | null;
                /** @description 사용자 개인 제목 키워드 검색 */
                user_persona_title?: string | null;
                /** @description 사용자 개인 설명 키워드 검색 */
                user_persona_description?: string | null;
                /** @description 시스템 제공 페르소나 필터 */
                is_system?: boolean | null;
                /** @description 공개 페르소나 필터 */
                is_public?: boolean | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_PersonaDataResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_persona_data_endpoint_v1_personas_data_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaDataCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_persona_data_endpoint_v1_personas_data__persona_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_persona_data_endpoint_v1_personas_data__persona_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaDataCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_persona_data_endpoint_v1_personas_data__persona_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_persona_data_endpoint_v1_personas_data__persona_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaDataUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_my_page_personas_v1_personas_my_get: {
        parameters: {
            query?: {
                /** @description 마이페이지 항목 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 페르소나 원본 ID 목록 필터 */
                persona_data_id?: number[] | null;
                /** @description 사용자 설정 이름 키워드 검색 */
                user_my_persona_title?: string | null;
                /** @description 사용자 설정 설명 키워드 검색 */
                user_my_persona_description?: string | null;
                /** @description 즐겨찾기 여부 필터 */
                is_favorite?: boolean | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_MyPagePersonaResponseWithConnections_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_persona_to_my_page_endpoint_v1_personas_my_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPagePersonaCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPagePersonaResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_my_page_persona_endpoint_v1_personas_my__my_page_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPagePersonaResponseWithConnections"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_my_page_persona_endpoint_v1_personas_my__my_page_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPagePersonaCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPagePersonaResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_my_page_persona_endpoint_v1_personas_my__my_page_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_my_page_persona_endpoint_v1_personas_my__my_page_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPagePersonaUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPagePersonaResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_persona_roles_v1_personas_role_get: {
        parameters: {
            query?: {
                /** @description 권한 매핑 레코드 ID 목록 필터 */
                id?: number[] | null;
                /** @description 페르소나 데이터 ID 목록 필터 */
                persona_data_id?: number[] | null;
                /** @description 역할/권한 ID 목록 필터 */
                role_id?: number[] | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_PersonaRoleResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_persona_role_endpoint_v1_personas_role_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaRoleCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_persona_role_endpoint_v1_personas_role__role_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_persona_role_endpoint_v1_personas_role__role_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaRoleCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_persona_role_endpoint_v1_personas_role__role_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_persona_role_endpoint_v1_personas_role__role_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaRoleUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_persona_runtime_v1_personas_runtime_get: {
        parameters: {
            query?: {
                /** @description 런타임 ID 목록 필터 */
                id?: number[] | null;
                /** @description RunnableConfig 키워드 검색 */
                runnable_config?: string | null;
                /** @description 시스템 프롬프트 키워드 검색 */
                system_prompt?: string | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_PersonaRuntimeResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_persona_runtime_endpoint_v1_personas_runtime_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaRuntimeCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_persona_runtime_endpoint_v1_personas_runtime__runtime_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                runtime_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_persona_runtime_endpoint_v1_personas_runtime__runtime_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                runtime_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaRuntimeCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_persona_runtime_endpoint_v1_personas_runtime__runtime_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                runtime_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_persona_runtime_endpoint_v1_personas_runtime__runtime_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                runtime_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaRuntimeUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_persona_data_runtime_v1_personas_data_runtime_get: {
        parameters: {
            query?: {
                /** @description ID 목록 필터 */
                id?: number[] | null;
                /** @description 원본 페르소나 ID 목록 필터 */
                persona_data_id?: number[] | null;
                /** @description 런타임 ID 목록 필터 */
                persona_runtime_id?: number[] | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_PersonaDataRuntimeResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_persona_data_runtime_endpoint_v1_personas_data_runtime_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaDataRuntimeCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_runtime_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_runtime_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaDataRuntimeCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_runtime_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_persona_data_runtime_endpoint_v1_personas_data_runtime__data_runtime_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_runtime_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaDataRuntimeUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDataRuntimeResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_persona_models_v1_personas_model_get: {
        parameters: {
            query?: {
                /** @description 페르소나 모델 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 모델 ID 목록 필터 */
                my_page_model_id?: string[] | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_PersonaModelResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_persona_model_endpoint_v1_personas_model_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaModelCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaModelResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_persona_model_endpoint_v1_personas_model__model_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaModelResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_persona_model_endpoint_v1_personas_model__model_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaModelCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaModelResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_persona_model_endpoint_v1_personas_model__model_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_persona_model_endpoint_v1_personas_model__model_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaModelUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaModelResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_agent_data_v1_agents_data_get: {
        parameters: {
            query?: {
                /** @description 에이전트 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 모델 ID 목록 필터 */
                model_my_page_id?: number[] | null;
                /** @description 페르소나 ID 목록 필터 */
                persona_my_page_id?: number[] | null;
                /** @description 도구 ID 목록 필터 */
                tool_my_page_id?: number[] | null;
                /** @description fallback 모델 ID 목록 필터 */
                fallback_model_my_page_id?: number[] | null;
                /** @description 카테고리 목록 필터 */
                category?: components["schemas"]["AgentCategoryEnum"][] | null;
                /** @description 이름 키워드 검색 */
                name?: string | null;
                /** @description 설명 키워드 검색 */
                description?: string | null;
                /** @description 사용자 개인 제목 키워드 검색 */
                user_agent_title?: string | null;
                /** @description 사용자 개인 설명 키워드 검색 */
                user_agent_description?: string | null;
                /** @description 시스템 제공 에이전트 필터 */
                is_system?: boolean | null;
                /** @description 공개 에이전트 필터 */
                is_public?: boolean | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_AgentDataResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_agent_data_endpoint_v1_agents_data_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentDataCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_agent_data_endpoint_v1_agents_data__agent_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_agent_data_endpoint_v1_agents_data__agent_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentDataCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_agent_data_endpoint_v1_agents_data__agent_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_agent_data_endpoint_v1_agents_data__agent_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentDataUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_my_page_agents_v1_agents_my_get: {
        parameters: {
            query?: {
                /** @description 마이페이지 항목 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 에이전트 원본 ID 목록 필터 */
                agent_data_id?: number[] | null;
                /** @description 사용자 설정 이름 키워드 검색 */
                user_my_agent_title?: string | null;
                /** @description 사용자 설정 설명 키워드 검색 */
                user_my_agent_description?: string | null;
                /** @description 즐겨찾기 여부 필터 */
                is_favorite?: boolean | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_MyPageAgentResponseWithScenarios_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_agent_to_my_page_endpoint_v1_agents_my_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPageAgentCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageAgentResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_my_page_agent_endpoint_v1_agents_my__my_page_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageAgentResponseWithScenarios"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_my_page_agent_endpoint_v1_agents_my__my_page_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPageAgentCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageAgentResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_my_page_agent_endpoint_v1_agents_my__my_page_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_my_page_agent_endpoint_v1_agents_my__my_page_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyPageAgentUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyPageAgentResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_agent_roles_v1_agents_role_get: {
        parameters: {
            query?: {
                /** @description 권한 매핑 레코드 ID 목록 필터 */
                id?: number[] | null;
                /** @description 에이전트 데이터 ID 목록 필터 */
                agent_data_id?: number[] | null;
                /** @description 역할/권한 ID 목록 필터 */
                role_id?: number[] | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_AgentRoleResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_agent_role_endpoint_v1_agents_role_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRoleCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_agent_role_endpoint_v1_agents_role__role_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_agent_role_endpoint_v1_agents_role__role_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRoleCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_agent_role_endpoint_v1_agents_role__role_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_agent_role_endpoint_v1_agents_role__role_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRoleUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRoleResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_nodes_v1_nodes_get: {
        parameters: {
            query?: {
                /** @description 노드 레코드 ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 시나리오 데이터 ID 목록 필터 */
                agt_scenarios_data_id?: number[] | null;
                /** @description 노드 ID (문자열) 목록 필터 */
                node_id?: string[] | null;
                /** @description 노드 타입 목록 필터 (start, agent, end, agent_0) */
                node_type?: string[] | null;
                /** @description 에이전트 ID 목록 필터 */
                agent_my_page_id?: number[] | null;
                /** @description 노드 이름 키워드 검색 */
                node_name?: string | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_NodeDataResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_nodes_endpoint_v1_nodes_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_node_endpoint_v1_nodes__node_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description agt_node_data 테이블의 PK ID */
                node_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replace_node_endpoint_v1_nodes__node_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description agt_node_data 테이블의 PK ID */
                node_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_node_endpoint_v1_nodes__node_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description agt_node_data 테이블의 PK ID */
                node_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_node_endpoint_v1_nodes__node_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description agt_node_data 테이블의 PK ID */
                node_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replace_nodes_by_scenario_endpoint_v1_nodes_scenario__agt_scenarios_data_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 교체할 시나리오의 ID */
                agt_scenarios_data_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_nodes_by_scenario_endpoint_v1_nodes_scenario__agt_scenarios_data_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 시나리오의 ID */
                agt_scenarios_data_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_nodes_by_scenario_endpoint_v1_nodes_scenario__agt_scenarios_data_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 시나리오의 ID */
                agt_scenarios_data_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataScenarioUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_nodes_my_page_v1_nodes_scenario_my_get: {
        parameters: {
            query?: {
                /** @description 마이페이지 ID 목록 필터 */
                scenario_my_page_id?: number[] | null;
                /** @description 유저 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 원본 시나리오 ID 목록 필터 */
                agt_scenarios_data_id?: number[] | null;
                /** @description 노드 타입 필터 */
                node_type?: string[] | null;
                /** @description 에이전트 ID 목록 필터 */
                agent_my_page_id?: number[] | null;
                /** @description 노드 ID 목록 필터 */
                node_id?: string[] | null;
                /** @description 노드 이름 키워드 검색 */
                node_name?: string | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_NodeDataMyPageResponse_"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_nodes_my_page_v1_nodes_scenario_my_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataMyPageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataMyPageResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replace_nodes_my_page_v1_nodes_scenario_my__scenario_my_page_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 마이페이지 ID */
                scenario_my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataMyPageUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataMyPageResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_nodes_my_page_v1_nodes_scenario_my__scenario_my_page_id__delete: {
        parameters: {
            query: {
                /** @description 요청 유저 ID */
                user_id: string;
            };
            header?: never;
            path: {
                /** @description 마이페이지 ID */
                scenario_my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_nodes_my_page_v1_nodes_scenario_my__scenario_my_page_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 마이페이지 ID */
                scenario_my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NodeDataMyPageUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeDataMyPageResponse"];
                };
            };
            /** @description 이 작업을 수행할 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 요청한 리소스를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 리소스 충돌이 발생했습니다. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류가 발생했습니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_edges_v1_edges_get: {
        parameters: {
            query?: {
                /** @description PK ID 목록 필터 */
                id?: number[] | null;
                /** @description 소유자 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 시나리오 데이터 ID 목록 필터 */
                agt_scenarios_data_id?: number[] | null;
                /** @description 엣지 ID (문자열) 목록 필터 */
                edge_id?: string[] | null;
                /** @description Source Node ID 키워드 검색 */
                source?: string | null;
                /** @description Target Node ID 키워드 검색 */
                target?: string | null;
                /** @description 엣지 타입 키워드 검색 */
                type?: string | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_EdgeDataResponse_"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_edges_endpoint_v1_edges_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataResponse"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_edge_endpoint_v1_edges__edge_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 엣지의 PK ID */
                edge_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataResponse"] | null;
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_edge_endpoint_v1_edges__edge_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 교체할 엣지의 PK ID */
                edge_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataResponse"] | null;
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_edge_endpoint_v1_edges__edge_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 엣지의 PK ID */
                edge_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_edge_endpoint_v1_edges__edge_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 엣지의 PK ID */
                edge_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataResponse"] | null;
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replace_edges_by_scenario_endpoint_v1_edges_scenario__agt_scenarios_data_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 교체할 시나리오의 ID */
                agt_scenarios_data_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataResponse"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_edges_by_scenario_endpoint_v1_edges_scenario__agt_scenarios_data_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 시나리오의 ID */
                agt_scenarios_data_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_edges_by_scenario_endpoint_v1_edges_scenario__agt_scenarios_data_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 시나리오의 ID */
                agt_scenarios_data_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataScenarioUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataResponse"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_edges_my_page_v1_edges_scenario_my_get: {
        parameters: {
            query?: {
                /** @description 마이페이지 ID 목록 필터 */
                scenario_my_page_id?: number[] | null;
                /** @description 유저 ID 목록 필터 */
                user_id?: string[] | null;
                /** @description 원본 시나리오 ID 목록 필터 */
                agt_scenarios_data_id?: number[] | null;
                /** @description 엣지 ID 목록 필터 */
                edge_id?: string[] | null;
                /** @description Source Node ID 키워드 검색 */
                source?: string | null;
                /** @description Target Node ID 키워드 검색 */
                target?: string | null;
                /** @description 엣지 타입 키워드 검색 */
                type?: string | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_EdgeDataMyPageResponse_"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_edges_my_page_v1_edges_scenario_my_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataMyPageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataMyPageResponse"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replace_edges_my_page_v1_edges_scenario_my__scenario_my_page_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 마이페이지 ID */
                scenario_my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataMyPageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataMyPageResponse"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_edges_my_page_v1_edges_scenario_my__scenario_my_page_id__delete: {
        parameters: {
            query: {
                /** @description 요청 유저 ID */
                user_id: string;
            };
            header?: never;
            path: {
                /** @description 마이페이지 ID */
                scenario_my_page_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_edges_my_page_v1_edges_scenario_my__scenario_my_page_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 마이페이지 ID */
                scenario_my_page_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EdgeDataMyPageUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EdgeDataMyPageResponse"];
                };
            };
            /** @description EdgeData를 찾을 수 없습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_graphs_api_v1_graphs__get: {
        parameters: {
            query?: {
                /** @description 유저 ID */
                user_id?: string | null;
                /** @description agt_scenarios_data_id */
                agt_scenarios_data_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_graph_api_v1_graphs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GraphRequestDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GraphResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_graph_api_v1_graphs__delete: {
        parameters: {
            query?: {
                /** @description 유저 ID */
                user_id?: string | null;
                /** @description agt_scenarios_data_id */
                agt_scenarios_data_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_websocket_keys_endpoint_v1_websocket_keys_get: {
        parameters: {
            query?: {
                /** @description WebSocketKey ID로 필터링 */
                id?: number[] | null;
                /** @description 사용자 ID로 필터링 */
                user_id?: string[] | null;
                /** @description 시나리오 마이페이지 ID로 필터링 */
                scenario_my_page_id?: number[] | null;
                /** @description 스레드 ID로 필터링 (Text) */
                thread_id?: string[] | null;
                /** @description QA ID로 필터링 (Text) */
                qa_id?: string[] | null;
                /** @description 정렬 기준 필드 (예: id, user_id, created_at) */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["WebSocketKeySortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_WebSocketKeyResponseDTO_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_websocket_key_endpoint_v1_websocket_keys_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebSocketKeyCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebSocketKeyResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_websocket_key_with_thread_id_endpoint_v1_websocket_keys_with_thread_id_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebSocketKeyCreateWithThreadIdDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebSocketKeyResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_websocket_key_endpoint_v1_websocket_keys__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 WebSocketKey의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebSocketKeyResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_websocket_key_endpoint_v1_websocket_keys__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 WebSocketKey의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebSocketKeyUpdateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebSocketKeyResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_websocket_key_endpoint_v1_websocket_keys__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 WebSocketKey의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_websocket_key_endpoint_v1_websocket_keys__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 부분 수정할 WebSocketKey의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebSocketKeyPatchDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebSocketKeyResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_titles_endpoint_v1_titles_get: {
        parameters: {
            query?: {
                /** @description 제목 ID로 필터링 */
                id?: number[] | null;
                /** @description 사용자 ID로 필터링 */
                user_id?: string[] | null;
                /** @description 시나리오 마이페이지 ID로 필터링 */
                scenario_my_page_id?: number[] | null;
                /** @description 스레드 ID로 필터링 (Text) */
                thread_id?: string[] | null;
                /** @description QA ID로 필터링 (Text) */
                qa_id?: string[] | null;
                /** @description 제목 내용으로 필터링 (부분 일치) */
                title?: string | null;
                /** @description 메시지 내용으로 필터링 (부분 일치) */
                message?: string | null;
                /** @description 플래그 여부로 필터링 */
                is_flag?: boolean | null;
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["TitleSortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_TitleResponseDTO_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_title_endpoint_v1_titles_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TitleServiceDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_title_endpoint_v1_titles__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 제목의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_title_endpoint_v1_titles__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 제목의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TitleCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_title_endpoint_v1_titles__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 제목의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_title_endpoint_v1_titles__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TitlePatchDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoke_agent_v1_invoke_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvokeInputDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvokeResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoke_agent_sse_v1_invoke_sse_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SSEInputDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_histories_endpoint_v1_histories_get: {
        parameters: {
            query?: {
                /** @description 히스토리 ID로 필터링 */
                id?: number[] | null;
                /** @description 사용자 ID로 필터링 */
                user_id?: string[] | null;
                /** @description 시나리오 마이페이지 ID로 필터링 */
                scenario_my_page_id?: number[] | null;
                /** @description 스레드 ID로 필터링 (Text) */
                thread_id?: string[] | null;
                /** @description QA ID로 필터링 (Text) */
                qa_id?: string[] | null;
                /** @description 속성으로 필터링 */
                attributes?: string[] | null;
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_HistoryResponseDTO_"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_history_endpoint_v1_histories_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_memory_configs_v1_histories_memory_config_get: {
        parameters: {
            query?: {
                /** @description 메모리 설정 ID로 필터링 */
                id?: number[] | null;
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_HistoryMemoryConfigResponseDTO_"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_memory_config_v1_histories_memory_config_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryMemoryConfigCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryConfigResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_memory_config_v1_histories_memory_config__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 메모리 설정의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryConfigResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_memory_config_v1_histories_memory_config__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 메모리 설정의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryMemoryConfigCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryConfigResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_memory_config_v1_histories_memory_config__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 메모리 설정의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_memory_config_v1_histories_memory_config__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 메모리 설정의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryMemoryConfigUpdateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryConfigResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_memory_scenario_relationships_v1_histories_relationship_get: {
        parameters: {
            query?: {
                /** @description 연결 레코드 ID로 필터링 */
                id?: number[] | null;
                /** @description 시나리오 데이터 ID로 필터링 */
                scenario_data_id?: number[] | null;
                /** @description 모델 마이페이지 ID로 필터링 */
                model_my_page_id?: number[] | null;
                /** @description 히스토리 메모리 설정 ID로 필터링 */
                history_memory_config_id?: number[] | null;
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_HistoryMemoryScenarioResponseDTO_"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_memory_scenario_relationship_v1_histories_relationship_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryMemoryScenarioCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryScenarioResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_memory_scenario_relationship_v1_histories_relationship__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 연결 레코드의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryScenarioResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_memory_scenario_relationship_v1_histories_relationship__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 연결 레코드의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryMemoryScenarioCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryScenarioResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_memory_scenario_relationship_v1_histories_relationship__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 연결 레코드의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_memory_scenario_relationship_v1_histories_relationship__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 연결 레코드의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryMemoryScenarioUpdateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryMemoryScenarioResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_thread_histories_endpoint_v1_histories_thread__user_id___thread_id__get: {
        parameters: {
            query?: {
                /** @description 시나리오 마이페이지 ID (선택 사항) */
                scenario_my_page_id?: number | null;
            };
            header?: never;
            path: {
                /** @description 사용자 ID */
                user_id: string;
                /** @description 스레드 ID (Text) */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryResponseDTO"][];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_histories_by_thread_id_endpoint_v1_histories_thread__thread_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 스레드 ID (Text) */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_history_endpoint_v1_histories__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 히스토리의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_history_endpoint_v1_histories__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 히스토리의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_history_answer_endpoint_v1_histories__id__answer_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 업데이트할 히스토리의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryUpdateAnswerDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryResponseDTO"];
                };
            };
            /** @description 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description 내부 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_chats_endpoint_v1_chats_get: {
        parameters: {
            query?: {
                /** @description 에이전트의 대화 기록 ID 필터 */
                id?: number[] | null;
                /** @description 유저 ID 필터 */
                user_id?: string[] | null;
                /** @description 시나리오 마이페이지 ID 필터 */
                scenario_my_page_id?: number[] | null;
                /** @description 스레드 ID 필터 (Text) */
                thread_id?: string[] | null;
                /** @description QA ID 필터 (Text) */
                qa_id?: string[] | null;
                /** @description 에이전트명 부분검색 */
                agent_name?: string | null;
                /** @description 역할 부분검색 */
                role?: string | null;
                /** @description 카테고리 부분검색 */
                category?: string | null;
                /** @description 모델명 부분검색 */
                model_name?: string | null;
                /** @description 정렬 기준 필드명 */
                sort_by?: string;
                /** @description 정렬 순서(ASC/DESC) */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedChatResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_chat_endpoint_v1_chats_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatServiceDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatCreateResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_chat_endpoint_v1_chats_delete: {
        parameters: {
            query: {
                /** @description 유저 ID */
                user_id: string;
                /** @description 시나리오 마이페이지 ID */
                scenario_my_page_id: number;
                /** @description 스레드 ID (Text) */
                thread_id: string;
                /** @description QA ID (Text) */
                qa_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_model_usage_get_v1_dashboard_usage_models_get: {
        parameters: {
            query: {
                /** @description 사용자 ID (예: '이박사') */
                user_id: string;
                /** @description 조회할 모델 ID (쉼표로 구분, 예: 170,203,52 or 170) */
                models: string;
                /** @description 조회 시작일 (YYYY-MM-DD, 예: '2025-01-01') */
                start_date: string;
                /** @description 조회 종료일 (YYYY-MM-DD, 예: '2025-12-31') */
                end_date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelUsageResponseDTO"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_model_usage_v1_dashboard_usage_models_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModelUsageRequestDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelUsageResponseDTO"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_agent_usage_statistics_get_v1_dashboard_usages_agents_statistics_get: {
        parameters: {
            query: {
                /** @description 사용자 ID (예: '이박사') */
                user_id: string;
                /** @description 조회할 에이전트 마이페이지 ID (쉼표로 구분, 예: '1,2,3') */
                agent_my_page_id: string;
                /** @description 조회 시작일 (YYYY-MM-DD, 예: '2025-01-01') */
                start_date: string;
                /** @description 조회 종료일 (YYYY-MM-DD, 예: '2025-12-31') */
                end_date: string;
                /** @description 시계열 단위 (hour, day, week, month, year) */
                granularity?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentUsageResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_agent_usage_statistics_post_v1_dashboard_usages_agents_statistics_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentUsageRequestDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentUsageResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_usage_get_v1_dashboard_scenarios_get: {
        parameters: {
            query: {
                /** @description 사용자 ID (예: '이박사') */
                user_id: string;
                /** @description 시나리오 마이페이지 ID (선택사항) */
                scenario_my_page_id?: number | null;
                /** @description 조회 시작일 (YYYY-MM-DD, 예: '2025-01-01') */
                start_date?: string | null;
                /** @description 조회 종료일 (YYYY-MM-DD, 예: '2025-12-31') */
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioUsageResponseDTO"] | components["schemas"]["SingleScenarioUsageResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_usage_v1_dashboard_scenarios_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioUsageRequestDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioUsageResponseDTO"] | components["schemas"]["SingleScenarioUsageResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_memory_settings_endpoint_v1_memory_setting_get: {
        parameters: {
            query?: {
                /** @description 메모리 설정 ID로 필터링 */
                id?: number[] | null;
                /** @description 사용자 ID로 필터링 */
                user_id?: string[] | null;
                /** @description 모델 ID로 필터링 */
                user_model_id?: number[] | null;
                /** @description 요약 전 토큰 수 최소값 */
                min_max_tokens_before_summary?: number | null;
                /** @description 요약 전 토큰 수 최대값 */
                max_max_tokens_before_summary?: number | null;
                /** @description 유지 메시지 수 최소값 */
                min_messages_to_keep?: number | null;
                /** @description 유지 메시지 수 최대값 */
                max_messages_to_keep?: number | null;
                /** @description 검색 조건 결합 연산자 */
                operation_type?: components["schemas"]["OperationTypeEnum"];
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_MemorySettingResponseDTO_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_memory_setting_endpoint_v1_memory_setting_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemorySettingCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySettingResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_memory_setting_endpoint_v1_memory_setting__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 메모리 설정의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySettingResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_memory_setting_endpoint_v1_memory_setting__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 메모리 설정의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemorySettingCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySettingResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_memory_setting_endpoint_v1_memory_setting__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 메모리 설정의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_memory_setting_endpoint_v1_memory_setting__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemorySettingPatchDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySettingResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_permissions_endpoint_v1_permissions_get: {
        parameters: {
            query?: {
                /** @description 권한 ID로 필터링 */
                id?: number[] | null;
                /** @description 경로로 필터링 (부분 일치) */
                path?: string | null;
                /** @description 리소스 타입으로 필터링 */
                resource_type?: string[] | null;
                /** @description HTTP 메서드로 필터링 */
                http_method?: string[] | null;
                /** @description 액션 타입으로 필터링 */
                action_type?: string[] | null;
                /** @description 필요 역할로 필터링 */
                required_role?: string[] | null;
                /** @description 정렬 기준 필드 */
                sort_by?: string;
                /** @description 정렬 순서 */
                order?: components["schemas"]["SortOrderEnum"];
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDTO_ApiPermissionResponseDTO_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_permission_endpoint_v1_permissions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiPermissionCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiPermissionResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_permissions_endpoint_v1_permissions_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    health_check_endpoint_v1_permissions_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    check_permission_endpoint_v1_permissions_check__path__get: {
        parameters: {
            query: {
                /** @description HTTP 메서드 */
                method: string;
                /** @description 사용자 역할 */
                user_role?: string;
            };
            header?: never;
            path: {
                /** @description 확인할 API 경로 */
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_permission_endpoint_v1_permissions__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 권한의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiPermissionResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_permission_endpoint_v1_permissions__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 권한의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiPermissionUpdateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiPermissionResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_permission_endpoint_v1_permissions__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 권한의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_permission_endpoint_v1_permissions__id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 권한의 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiPermissionPatchDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiPermissionResponseDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_version_version_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
