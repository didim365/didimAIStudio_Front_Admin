/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/account/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 조회
         * @description ID로 사용자 조회
         */
        get: operations["get_user_api_v1_users_account__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입
         * @description 회원 정보를 받아 새 사용자를 등록합니다.
         */
        post: operations["register_user_api_v1_users_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 현재 로그인한 사용자 정보 및 역할 조회
         * @description JWT 토큰을 통해 인증된 현재 사용자의 상세 정보와 역할 정보를 조회합니다.
         */
        get: operations["read_current_user_with_roles_api_v1_users_me_get"];
        put?: never;
        post?: never;
        /**
         * 회원 탈퇴
         * @description 현재 로그인한 사용자 계정을 삭제합니다.
         */
        delete: operations["delete_current_user_api_v1_users_me_delete"];
        options?: never;
        head?: never;
        /**
         * 사용자 정보 업데이트
         * @description 현재 로그인한 사용자의 정보를 업데이트합니다.
         */
        patch: operations["update_current_user_api_v1_users_me_patch"];
        trace?: never;
    };
    "/api/v1/users/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 비밀번호 변경
         * @description 현재 사용자의 비밀번호 변경
         */
        patch: operations["change_password_api_v1_users_me_password_patch"];
        trace?: never;
    };
    "/api/v1/users/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 관리자용 사용자 목록 조회
         * @description 관리자 페이지에서 사용자 목록을 페이지 단위로 조회합니다.
         */
        get: operations["get_user_list_api_v1_users_admin_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/admin/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 관리자용 사용자 추가
         * @description 관리자가 새 사용자를 추가합니다.
         */
        post: operations["admin_create_user_api_v1_users_admin_user_post"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 관리자용 사용자 정보 수정
         * @description 관리자가 사용자의 모든 정보를 수정합니다.
         */
        patch: operations["admin_update_user_info_endpoint_api_v1_users_admin_user_patch"];
        trace?: never;
    };
    "/api/v1/users/admin/user/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 관리자용 사용자 상태 변경
         * @description 관리자가 사용자의 상태를 변경합니다 (비활성화/활성화/정지 등).
         */
        patch: operations["update_user_status_endpoint_api_v1_users_admin_user_status_patch"];
        trace?: never;
    };
    "/api/v1/users/me/profile-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 프로필 이미지 조회
         * @description 현재 사용자의 프로필 이미지 정보 조회
         */
        get: operations["get_profile_image_api_v1_users_me_profile_image_get"];
        put?: never;
        /**
         * 프로필 이미지 업로드
         * @description 현재 사용자의 프로필 이미지 업로드
         *
         *     - 허용 형식: PNG, JPG, JPEG
         *     - 최대 크기: 20MB
         *     - 기존 프로필 이미지가 있으면 논리적 삭제 후 새 이미지 설정
         */
        post: operations["upload_profile_image_api_v1_users_me_profile_image_post"];
        /**
         * 프로필 이미지 삭제
         * @description 현재 사용자의 프로필 이미지 삭제 (논리적 삭제)
         */
        delete: operations["delete_profile_image_api_v1_users_me_profile_image_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 그룹 목록 조회
         * @description 페이징된 그룹 목록을 조회합니다. include_members=true로 설정하면 회원 정보도 함께 조회됩니다.
         */
        get: operations["get_groups_api_v1_groups_get"];
        put?: never;
        /**
         * 그룹 생성
         * @description 새로운 그룹을 생성.
         */
        post: operations["create_new_group_api_v1_groups_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 그룹 조회
         * @description 특정 그룹 정보를 조회합니다.
         */
        get: operations["get_group_api_v1_groups__group_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 그룹 정보 수정
         * @description 그룹의 정보를 수정합니다.
         */
        patch: operations["update_group_info_api_v1_groups__group_id__patch"];
        trace?: never;
    };
    "/api/v1/groups/users/{user_id}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자가 속한 그룹 조회
         * @description 페이징된 사용자 그룹 목록을 조회합니다. include_members=true로 설정하면 회원 정보도 함께 조회됩니다.
         */
        get: operations["get_user_groups_api_v1_groups_users__user_id__groups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 유저 그룹 추가
         * @description 그룹에 유저를 추가하고 그 결과를 받습니다.
         */
        post: operations["user_to_group_api_v1_groups_user_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/update_user_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 사용자 그룹 상태 변경
         * @description 사용자의 그룹 상태를 업데이트하고 업데이트된 그룹의 회원 정보를 반환합니다.
         */
        put: operations["update_user_group_status_endpoint_api_v1_groups_update_user_status_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{group_id}/available-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 그룹 추가 가능 사용자 조회
         * @description 그룹에 추가할 수 있는 사용자 목록을 이메일 검색과 페이지네이션으로 조회합니다.
         */
        get: operations["get_available_users_for_group_endpoint_api_v1_groups__group_id__available_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{group_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 그룹 멤버 목록 조회
         * @description 그룹의 멤버 목록을 페이지네이션으로 조회합니다.
         */
        get: operations["get_group_members_api_v1_groups__group_id__members_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 역할 조회
         * @description 모든 권한 조회 (권한은 Admin, manager, user 등으로 정책에 따라 설정할 수 있다.)
         */
        get: operations["read_all_roles_api_v1_roles__get"];
        put?: never;
        /**
         * 역할 생성
         * @description **새로운 역할을 생성합니다.**
         */
        post: operations["create_new_role_api_v1_roles__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 역할 조회 */
        get: operations["read_role_by_id_api_v1_roles__role_id__get"];
        /**
         * 역할 수정
         * @description **기존 역할을 수정합니다.**
         */
        put: operations["update_existing_role_api_v1_roles__role_id__put"];
        post?: never;
        /**
         * 역할 삭제
         * @description **기존 역할을 삭제합니다.**
         */
        delete: operations["delete_existing_role_api_v1_roles__role_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/privileges/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 모든 권한 조회 */
        get: operations["read_all_privileges_api_v1_roles_privileges_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/privileges/{privilege_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 권한 조회 */
        get: operations["read_privilege_by_id_api_v1_roles_privileges__privilege_id__get"];
        /** 권한 수정 */
        put: operations["update_existing_privilege_api_v1_roles_privileges__privilege_id__put"];
        post?: never;
        /** 권한 삭제 */
        delete: operations["delete_existing_privilege_api_v1_roles_privileges__privilege_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/user/check_privilege/{privilege_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check User Privilege Api */
        get: operations["check_user_privilege_api_api_v1_roles_user_check_privilege__privilege_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/privileges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 권한 생성 */
        post: operations["create_new_privilege_api_v1_roles_privileges_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{role_id}/privileges/{privilege_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 역할에 권한 할당
         * @description **역할에 권한을 할당합니다.**
         */
        post: operations["assign_privilege_api_v1_roles__role_id__privileges__privilege_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{role_id}/privileges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 역할의 권한 조회 */
        get: operations["get_privileges_of_role_api_v1_roles__role_id__privileges_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/remove_privilege": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 역할에서 권한 제거 */
        delete: operations["remove_privilege_from_role_api_api_v1_roles_remove_privilege_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/assign_role_to_group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 그룹에 역할 할당 */
        post: operations["assign_role_to_group_api_api_v1_roles_assign_role_to_group_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/groups/{group_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 그룹의 역할 조회 */
        get: operations["get_roles_of_group_api_v1_roles_groups__group_id__roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/groups/{group_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 그룹에서 역할 제거 */
        delete: operations["remove_role_from_group_api_api_v1_roles_groups__group_id__roles__role_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 사용자 로그인
         * @description 이메일과 비밀번호를 통한 사용자 인증 및 JWT 토큰 발급
         */
        post: operations["login_user_api_v1_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 액세스 토큰 갱신
         * @description Refresh Token을 사용하여 새로운 Access Token을 발급
         *
         *     ⚠️ 에러 코드:
         *     - 401004: REFRESH_TOKEN_EXPIRED - 리프레시 토큰이 만료됨
         *     - 401005: INVALID_REFRESH_TOKEN - 유효하지 않은 리프레시 토큰
         *     - 401006: INVALID_REFRESH_TOKEN_CLAIMS - 토큰 클레임이 올바르지 않음
         *     - 401007: USER_NOT_FOUND - 사용자를 찾을 수 없음
         *     - 401008: USER_INACTIVE - 비활성화된 사용자
         *
         *     :param refresh_token: 리프레시 토큰
         *     :param db: 데이터베이스 세션
         *     :return: 새로운 액세스 토큰
         */
        post: operations["refresh_access_token_api_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/generate-scenario-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * API-Key JWT 생성
         * @description Agents 서비스에서 시나리오 기반 API-Key(JWT) 생성을 요청할 때 사용. 시나리오 생성자의 passport 정보를 기반으로 API-Key용 Passport 구조를 생성한다.
         */
        post: operations["generate_api_key_jwt_api_v1_auth_generate_scenario_api_key_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API-Key 목록 조회
         * @description 페이지네이션과 필터링 조건을 포함한 API-Key 목록을 조회합니다.
         */
        get: operations["get_api_keys_api_v1_auth_api_keys_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scenario-gateway/ips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * scenario-gateway IP 화이트리스트 목록 조회
         * @description 사용자의 scenario-gateway IP 화이트리스트 목록을 조회합니다.
         */
        get: operations["get_scenario_gateway_ips_api_v1_scenario_gateway_ips_get"];
        put?: never;
        /**
         * scenario-gateway IP 화이트리스트 추가
         * @description 사용자의 scenario-gateway IP 화이트리스트에 새로운 IP 주소를 추가합니다.
         */
        post: operations["create_scenario_gateway_ip_api_v1_scenario_gateway_ips_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scenario-gateway/ips/{ip_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 scenario-gateway IP 화이트리스트 조회
         * @description 특정 scenario-gateway IP 화이트리스트의 상세 정보를 조회합니다.
         */
        get: operations["get_scenario_gateway_ip_api_v1_scenario_gateway_ips__ip_id__get"];
        /**
         * scenario-gateway IP 화이트리스트 수정
         * @description 기존 scenario-gateway IP 화이트리스트의 정보를 수정합니다.
         */
        put: operations["update_scenario_gateway_ip_api_v1_scenario_gateway_ips__ip_id__put"];
        post?: never;
        /**
         * scenario-gateway IP 화이트리스트 삭제
         * @description scenario-gateway IP 화이트리스트를 삭제합니다.
         */
        delete: operations["delete_scenario_gateway_ip_api_v1_scenario_gateway_ips__ip_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scenario-gateway/ips/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * scenario-gateway IP 화이트리스트 일괄 생성
         * @description 여러 개의 IP 주소를 한 번에 scenario-gateway IP 화이트리스트에 추가합니다.
         */
        post: operations["bulk_create_scenario_gateway_ips_api_v1_scenario_gateway_ips_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scenario-gateway/ips/active/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 활성화된 scenario-gateway IP 화이트리스트 조회
         * @description 사용자의 활성화된 scenario-gateway IP 화이트리스트 목록을 조회합니다.
         */
        get: operations["get_active_scenario_gateway_ips_api_v1_scenario_gateway_ips_active_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scenario-gateway/ips/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * scenario-gateway IP 화이트리스트 통계 조회
         * @description 사용자의 scenario-gateway IP 화이트리스트 통계 정보를 조회합니다.
         */
        get: operations["get_scenario_gateway_ip_statistics_api_v1_scenario_gateway_ips_statistics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/scenario-gateway/ips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 scenario-gateway IP 화이트리스트 목록 조회 (관리자용)
         * @description 모든 사용자의 scenario-gateway IP 화이트리스트 목록을 조회합니다.
         */
        get: operations["get_all_scenario_gateway_ips_api_v1_admin_scenario_gateway_ips_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/scenario-gateway/ips/{ip_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 scenario-gateway IP 화이트리스트 조회 (관리자용)
         * @description 특정 scenario-gateway IP 화이트리스트의 상세 정보를 조회합니다.
         */
        get: operations["get_scenario_gateway_ip_admin_api_v1_admin_scenario_gateway_ips__ip_id__get"];
        /**
         * scenario-gateway IP 화이트리스트 수정 (관리자용)
         * @description 관리자가 기존 scenario-gateway IP 화이트리스트의 정보를 수정합니다.
         */
        put: operations["update_scenario_gateway_ip_admin_api_v1_admin_scenario_gateway_ips__ip_id__put"];
        post?: never;
        /**
         * scenario-gateway IP 화이트리스트 삭제 (관리자용)
         * @description 관리자가 scenario-gateway IP 화이트리스트를 삭제합니다.
         */
        delete: operations["delete_scenario_gateway_ip_admin_api_v1_admin_scenario_gateway_ips__ip_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/scenario-gateway/ips/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 사용자 대신 scenario-gateway IP 화이트리스트 추가 (관리자용)
         * @description 관리자가 특정 사용자 대신 scenario-gateway IP 화이트리스트를 추가합니다.
         */
        post: operations["create_scenario_gateway_ip_for_user_api_v1_admin_scenario_gateway_ips_users__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/scenario-gateway/ips/users/{user_id}/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 사용자 대신 scenario-gateway IP 화이트리스트 일괄 생성 (관리자용)
         * @description 관리자가 특정 사용자 대신 여러 개의 IP 주소를 한 번에 추가합니다.
         */
        post: operations["bulk_create_scenario_gateway_ips_for_user_api_v1_admin_scenario_gateway_ips_users__user_id__bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/scenario-gateway/ips/all/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 활성화된 scenario-gateway IP 화이트리스트 조회 (관리자용)
         * @description 모든 사용자의 활성화된 scenario-gateway IP 화이트리스트 목록을 조회합니다.
         */
        get: operations["get_all_active_scenario_gateway_ips_api_v1_admin_scenario_gateway_ips_all_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/scenario-gateway/ips/statistics/global": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 scenario-gateway IP 화이트리스트 통계 조회 (관리자용)
         * @description 전체 시스템의 scenario-gateway IP 화이트리스트 통계 정보를 조회합니다.
         */
        get: operations["get_global_scenario_gateway_ip_statistics_api_v1_admin_scenario_gateway_ips_statistics_global_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/scenario-gateway/ips/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * scenario-gateway 동기화 트리거 (관리자용)
         * @description 관리자가 scenario-gateway와 IP 화이트리스트 동기화를 수동으로 트리거합니다.
         */
        post: operations["trigger_scenario_gateway_sync_api_v1_admin_scenario_gateway_ips_sync_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{service}/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동적 게이트웨이 라우터 (GET)
         * @description 게이트웨이를 거쳐 요청되는 GET메소드에 대한 동적 라우팅
         */
        get: operations["dynamic_gateway_router_get"];
        /**
         * Dynamic Gateway Router (PUT)
         * @description Dynamic routing for PUT requests through the gateway.
         */
        put: operations["dynamic_gateway_router_put"];
        /**
         * Dynamic Gateway Router (POST)
         * @description Dynamic routing for POST requests through the gateway.
         */
        post: operations["dynamic_gateway_router_post"];
        /**
         * Dynamic Gateway Router (DELETE)
         * @description Dynamic routing for DELETE requests through the gateway.
         */
        delete: operations["dynamic_gateway_router_delete"];
        options?: never;
        head?: never;
        /**
         * Dynamic Gateway Router (PATCH)
         * @description Dynamic routing for PATCH requests through the gateway.
         */
        patch: operations["dynamic_gateway_router_patch"];
        trace?: never;
    };
    "/api/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Gateway Status */
        get: operations["get_gateway_status_api_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ActionTypeEnum
         * @enum {string}
         */
        ActionTypeEnum: "READ" | "WRITE" | "EXECUTE" | "DELETE" | "UPDATE" | "PATCH";
        /**
         * AdminUserCreateRequest
         * @description 관리자가 사용자를 생성할 때 사용하는 요청 객체
         */
        AdminUserCreateRequest: {
            /**
             * Email
             * Format: email
             * @description 사용자 이메일 주소
             */
            email: string;
            /**
             * Password
             * @description 최소 8자 비밀번호
             */
            password: string;
            /**
             * Full Name
             * @description 사용자 이름
             */
            full_name?: string | null;
            /**
             * Phone
             * @description 사용자 전화번호
             */
            phone: string;
            /**
             * Preferences
             * @description 사용자 설정 (JSON)
             */
            preferences?: Record<string, never> | null;
            /**
             * Last Login
             * @description 마지막 로그인 시간
             */
            last_login?: string | null;
            /**
             * @description 계정 상태 (기본값: ACTIVE)
             * @default ACTIVE
             */
            status: components["schemas"]["UserStatus"];
            /**
             * Role Id
             * @description 사용자에게 할당할 역할 ID
             */
            role_id?: number | null;
        };
        /**
         * AdminUserUpdateRequest
         * @description 관리자용 사용자 정보 수정 요청
         * @example {
         *       "email": "updated.user@example.com",
         *       "full_name": "Updated Name",
         *       "phone_number": "010-1234-5678",
         *       "preferences": {
         *         "theme": "dark"
         *       },
         *       "role_id": 2,
         *       "status": "ACTIVE",
         *       "user_id": 1
         *     }
         */
        AdminUserUpdateRequest: {
            /**
             * User Id
             * @description 수정할 사용자의 ID
             */
            user_id: number;
            /** Email */
            email?: string | null;
            /** Full Name */
            full_name?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            status?: components["schemas"]["UserStatus"] | null;
            /** Preferences */
            preferences?: Record<string, never> | null;
            /** Role Id */
            role_id?: number | null;
        };
        /**
         * ApiKeyGenerateRequest
         * @description API-Key JWT 생성 요청 모델
         * @example {
         *       "description": "테스트용 API-Key",
         *       "expires_at": "2024-12-31T23:59:59Z",
         *       "group_ids": [
         *         456,
         *         789
         *       ],
         *       "is_scenario_owner_permission": true,
         *       "my_scenario_id": 123
         *     }
         */
        ApiKeyGenerateRequest: {
            /**
             * My Scenario Id
             * @description 시나리오 ID
             */
            my_scenario_id: number;
            /**
             * Group Ids
             * @description 권한을 적용할 그룹 ID 목록
             */
            group_ids: number[];
            /**
             * Expires At
             * Format: date-time
             * @description 만료일시 (ISO 8601)
             */
            expires_at: string;
            /**
             * Description
             * @description API-Key 설명
             */
            description?: string | null;
            /**
             * Is Scenario Owner Permission
             * @description 발급자 권한 적용 여부
             * @default false
             */
            is_scenario_owner_permission: boolean;
        };
        /**
         * ApiKeyGenerateResponse
         * @description API-Key JWT 생성 응답 모델
         * @example {
         *       "expires_at": "2024-12-31T23:59:59Z",
         *       "group_ids": [
         *         456,
         *         789
         *       ],
         *       "jwt_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
         *     }
         */
        ApiKeyGenerateResponse: {
            /**
             * Jwt Token
             * @description 생성된 API-Key JWT 토큰
             */
            jwt_token: string;
            /**
             * Group Ids
             * @description 적용된 그룹 ID 목록
             */
            group_ids: number[];
            /**
             * Expires At
             * Format: date-time
             * @description 만료일시
             */
            expires_at: string;
        };
        /**
         * ApiKeyInfo
         * @description API-Key 정보 모델
         * @example {
         *       "api_key_short": "eyJhbGciOiJIUzI1NiI...",
         *       "created_at": "2024-01-01T12:00:00Z",
         *       "expired_at": "2024-12-31T23:59:59Z",
         *       "group_id": 111,
         *       "id": 1,
         *       "is_active": true,
         *       "is_expired": false,
         *       "is_issuer_permission": false,
         *       "my_scenario_id": 456,
         *       "scenario_data_id": 789,
         *       "user_id": 123
         *     }
         */
        ApiKeyInfo: {
            /**
             * Id
             * @description API-Key ID
             */
            id: number;
            /**
             * Api Key Short
             * @description API-Key 앞 20자
             */
            api_key_short: string;
            /**
             * User Id
             * @description 시나리오 생성자 ID
             */
            user_id: number;
            /**
             * My Scenario Id
             * @description 시나리오 ID
             */
            my_scenario_id: number;
            /**
             * Scenario Data Id
             * @description 시나리오 데이터 ID
             */
            scenario_data_id?: number | null;
            /**
             * Group Id
             * @description 적용된 그룹 ID
             */
            group_id?: number | null;
            /**
             * Created At
             * Format: date-time
             * @description 생성 시각
             */
            created_at: string;
            /**
             * Expired At
             * Format: date-time
             * @description 만료 시각
             */
            expired_at: string;
            /**
             * Is Active
             * @description 활성 상태
             */
            is_active: boolean;
            /**
             * Is Issuer Permission
             * @description 발급자 권한 포함 여부
             */
            is_issuer_permission: boolean;
            /**
             * Is Expired
             * @description 만료 여부
             */
            is_expired: boolean;
        };
        /**
         * ApiKeyListResponse
         * @description API-Key 목록 조회 응답 모델
         * @example {
         *       "items": [
         *         {
         *           "api_key_short": "eyJhbGciOiJIUzI1NiI...",
         *           "created_at": "2024-01-01T12:00:00Z",
         *           "expired_at": "2024-12-31T23:59:59Z",
         *           "group_id": 111,
         *           "id": 1,
         *           "is_active": true,
         *           "is_expired": false,
         *           "is_issuer_permission": false,
         *           "my_scenario_id": 456,
         *           "scenario_data_id": 789,
         *           "user_id": 123
         *         }
         *       ],
         *       "pagination": {
         *         "has_next": true,
         *         "has_previous": false,
         *         "page": 1,
         *         "size": 10,
         *         "total_count": 25,
         *         "total_pages": 3
         *       }
         *     }
         */
        ApiKeyListResponse: {
            /**
             * Items
             * @description API-Key 목록
             */
            items: components["schemas"]["ApiKeyInfo"][];
            /** @description 페이지네이션 정보 */
            pagination: components["schemas"]["PageInfo"];
        };
        /**
         * AvailableUserResponse
         * @description 그룹 추가 가능 사용자 응답 모델
         */
        AvailableUserResponse: {
            /**
             * Id
             * @description 사용자 ID
             */
            id: number;
            /**
             * Email
             * @description 사용자 이메일
             */
            email: string;
            /**
             * Full Name
             * @description 사용자 이름
             */
            full_name?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description 가입일
             */
            created_at: string;
        };
        /**
         * AvailableUsersListResponse
         * @description 그룹 추가 가능 사용자 목록 응답
         * @example {
         *       "items": [
         *         {
         *           "created_at": "2024-01-01T00:00:00",
         *           "email": "user@example.com",
         *           "full_name": "홍길동",
         *           "id": 1
         *         }
         *       ],
         *       "page": 1,
         *       "size": 20,
         *       "total": 50,
         *       "total_pages": 3
         *     }
         */
        AvailableUsersListResponse: {
            /**
             * Items
             * @description 사용자 목록
             */
            items: components["schemas"]["AvailableUserResponse"][];
            /**
             * Total
             * @description 총 사용자 수
             */
            total: number;
            /**
             * Page
             * @description 현재 페이지
             */
            page: number;
            /**
             * Size
             * @description 페이지 크기
             */
            size: number;
            /**
             * Total Pages
             * @description 총 페이지 수
             */
            total_pages: number;
        };
        /** Body_upload_profile_image_api_v1_users_me_profile_image_post */
        Body_upload_profile_image_api_v1_users_me_profile_image_post: {
            /**
             * File
             * Format: binary
             * @description 업로드할 프로필 이미지
             */
            file: string;
        };
        /** GroupCreate */
        GroupCreate: {
            /** Group Name */
            group_name: string;
            group_type: components["schemas"]["GroupTypeEnum"];
            /** Parent Group Id */
            parent_group_id?: number | null;
            /** Parent */
            parent?: string | null;
            /** Manager */
            manager?: number | null;
            /** Creator */
            creator: number;
            /** Role Id */
            role_id?: number | null;
        };
        /**
         * GroupMemberResponse
         * @description 그룹 회원 정보 응답 모델
         */
        GroupMemberResponse: {
            /**
             * User Id
             * @description 사용자 ID
             */
            user_id: number;
            /**
             * Full Name
             * @description 사용자 이름
             */
            full_name: string;
            /**
             * Email
             * @description 사용자 이메일
             */
            email: string;
            /**
             * Role Id
             * @description 역할 ID
             */
            role_id?: number | null;
            /**
             * Role Name
             * @description 역할명
             */
            role_name?: string | null;
            /** @description 그룹 내 상태 */
            status: components["schemas"]["UserGroupStatusEnum"];
            /**
             * Joined At
             * Format: date-time
             * @description 그룹 가입일
             */
            joined_at: string;
        };
        /** GroupResponse */
        GroupResponse: {
            /** Id */
            id: number;
            /** Group Name */
            group_name: string;
            group_type: components["schemas"]["GroupTypeEnum"];
            /** Parent Group Id */
            parent_group_id: number | null;
            /** Manager */
            manager: number | null;
            /** Creator */
            creator: number;
            /** Role Id */
            role_id: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at: string | null;
        };
        /** GroupRoleResponse */
        GroupRoleResponse: {
            /** Group Id */
            group_id: number;
            /** Role Id */
            role_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * GroupType
         * @enum {string}
         */
        GroupType: "COMPANY" | "DEPARTMENT" | "TEAM" | "PERSONAL";
        /**
         * GroupTypeEnum
         * @enum {string}
         */
        GroupTypeEnum: "COMPANY" | "DEPARTMENT" | "TEAM" | "PERSONAL";
        /**
         * GroupUpdate
         * @description 그룹 수정을 위한 DTO
         */
        GroupUpdate: {
            /**
             * Group Name
             * @description 그룹명
             */
            group_name?: string | null;
            /** @description 그룹 타입 */
            group_type?: components["schemas"]["GroupType"] | null;
            /**
             * Parent Group
             * @description 상위 그룹 ID
             */
            parent_group?: number | null;
            /**
             * Manager
             * @description 그룹 관리자 ID
             */
            manager?: number | null;
            /**
             * Role Id
             * @description 권한 ID
             */
            role_id?: number | null;
        };
        /**
         * GroupWithMembersResponse
         * @description 회원 정보가 포함된 그룹 응답 모델
         */
        GroupWithMembersResponse: {
            /** Id */
            id: number;
            /** Group Name */
            group_name: string;
            group_type: components["schemas"]["GroupTypeEnum"];
            /** Parent Group Id */
            parent_group_id: number | null;
            /** Manager */
            manager: number | null;
            /** Creator */
            creator: number;
            /** Role Id */
            role_id: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at: string | null;
            /**
             * Members
             * @description 그룹 회원 목록
             */
            members?: components["schemas"]["GroupMemberResponse"][];
            /**
             * Member Count
             * @description 총 회원 수
             * @default 0
             */
            member_count: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LoginRequest
         * @example {
         *       "email": "user@example.com",
         *       "password": "strongpassword123"
         *     }
         */
        LoginRequest: {
            /**
             * Email
             * Format: email
             * @description 사용자 이메일 주소
             * @example user@example.com
             */
            email: string;
            /**
             * Password
             * @description 사용자 패스워드
             * @example strongPassword123
             */
            password: string;
        };
        /**
         * PageInfo
         * @description 페이지네이션 정보 모델
         * @example {
         *       "has_next": true,
         *       "has_previous": false,
         *       "page": 1,
         *       "size": 10,
         *       "total_count": 25,
         *       "total_pages": 3
         *     }
         */
        PageInfo: {
            /**
             * Page
             * @description 현재 페이지 번호
             */
            page: number;
            /**
             * Size
             * @description 페이지 크기
             */
            size: number;
            /**
             * Total Count
             * @description 전체 항목 수
             */
            total_count: number;
            /**
             * Total Pages
             * @description 전체 페이지 수
             */
            total_pages: number;
            /**
             * Has Next
             * @description 다음 페이지 존재 여부
             */
            has_next: boolean;
            /**
             * Has Previous
             * @description 이전 페이지 존재 여부
             */
            has_previous: boolean;
        };
        /**
         * PaginatedGroupsWithMembersResponse
         * @description 회원 정보가 포함된 페이징된 그룹 응답
         */
        PaginatedGroupsWithMembersResponse: {
            /**
             * Total
             * @description 전체 항목 수
             */
            total: number;
            /**
             * Page
             * @description 현재 페이지 번호
             */
            page: number;
            /**
             * Size
             * @description 페이지당 항목 수
             */
            size: number;
            /**
             * Total Pages
             * @description 전체 페이지 수
             */
            total_pages: number;
            /**
             * Items
             * @description 회원 정보가 포함된 그룹 목록
             */
            items: components["schemas"]["GroupWithMembersResponse"][];
        };
        /** PasswordUpdateRequest */
        PasswordUpdateRequest: {
            /** Old Password */
            old_password: string;
            /** New Password */
            new_password: string;
        };
        /** PrivilegeCreate */
        PrivilegeCreate: {
            /** Privilege Name */
            privilege_name: string;
            /** Description */
            description?: string | null;
            /** Resource Type */
            resource_type: string;
            action_type: components["schemas"]["ActionTypeEnum"];
        };
        /** PrivilegeResponse */
        PrivilegeResponse: {
            /** Id */
            id: number;
            /** Privilege Name */
            privilege_name: string;
            /** Description */
            description: string | null;
            /** Resource Type */
            resource_type: string;
            action_type: components["schemas"]["ActionTypeEnum"];
        };
        /** RoleCreate */
        RoleCreate: {
            /** Role Name */
            role_name: string;
            /** Description */
            description?: string | null;
        };
        /** RolePrivilegeResponse */
        RolePrivilegeResponse: {
            /** Role Id */
            role_id: number;
            /** Privilege Id */
            privilege_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            role: components["schemas"]["RoleResponse"] | null;
            privilege: components["schemas"]["PrivilegeResponse"] | null;
        };
        /** RoleResponse */
        RoleResponse: {
            /** Id */
            id: number;
            /** Role Name */
            role_name: string;
            /** Description */
            description: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * ScenarioGatewayIpBulkCreate
         * @description scenario-gateway IP 화이트리스트 일괄 생성 요청 모델
         */
        ScenarioGatewayIpBulkCreate: {
            /**
             * Ip Addresses
             * @description IP 주소 목록
             */
            ip_addresses: string[];
            /**
             * Description
             * @description 공통 설명
             */
            description?: string | null;
            /**
             * Is Active
             * @description 활성화 여부
             * @default true
             */
            is_active: boolean;
        };
        /**
         * ScenarioGatewayIpBulkResponse
         * @description scenario-gateway IP 화이트리스트 일괄 처리 응답 모델
         */
        ScenarioGatewayIpBulkResponse: {
            /**
             * Created Count
             * @description 생성된 개수
             */
            created_count: number;
            /**
             * Updated Count
             * @description 업데이트된 개수
             */
            updated_count: number;
            /**
             * Failed Count
             * @description 실패한 개수
             */
            failed_count: number;
            /**
             * Failed Items
             * @description 실패한 항목 목록
             */
            failed_items?: Record<string, never>[];
        };
        /**
         * ScenarioGatewayIpCreate
         * @description scenario-gateway IP 화이트리스트 생성 요청 모델
         */
        ScenarioGatewayIpCreate: {
            /**
             * Ip Address
             * @description 허용할 IP 주소 (IPv4/IPv6)
             */
            ip_address: string;
            /**
             * Description
             * @description IP 주소에 대한 설명
             */
            description?: string | null;
            /**
             * Is Active
             * @description 활성화 여부
             * @default true
             */
            is_active: boolean;
        };
        /**
         * ScenarioGatewayIpListResponse
         * @description scenario-gateway IP 화이트리스트 목록 응답 모델
         */
        ScenarioGatewayIpListResponse: {
            /**
             * Items
             * @description IP 화이트리스트 목록
             */
            items: components["schemas"]["ScenarioGatewayIpResponse"][];
            /**
             * Total
             * @description 전체 개수
             */
            total: number;
            /**
             * Page
             * @description 현재 페이지
             */
            page: number;
            /**
             * Size
             * @description 페이지 크기
             */
            size: number;
            /**
             * Pages
             * @description 전체 페이지 수
             */
            pages: number;
        };
        /**
         * ScenarioGatewayIpResponse
         * @description scenario-gateway IP 화이트리스트 응답 모델
         */
        ScenarioGatewayIpResponse: {
            /**
             * Ip Address
             * @description 허용할 IP 주소 (IPv4/IPv6)
             */
            ip_address: string;
            /**
             * Description
             * @description IP 주소에 대한 설명
             */
            description?: string | null;
            /**
             * Is Active
             * @description 활성화 여부
             * @default true
             */
            is_active: boolean;
            /**
             * Id
             * @description 고유 식별자
             */
            id: number;
            /**
             * User Id
             * @description IP를 등록한 사용자 ID
             */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             * @description 생성 시간
             */
            created_at: string;
            /**
             * Updated At
             * @description 수정 시간
             */
            updated_at?: string | null;
            /**
             * Created By
             * @description 생성자 ID (관리자가 대신 생성한 경우)
             */
            created_by?: number | null;
        };
        /**
         * ScenarioGatewayIpSyncRequest
         * @description scenario-gateway 동기화 요청 모델
         */
        ScenarioGatewayIpSyncRequest: {
            /**
             * Force Sync
             * @description 강제 동기화 여부
             * @default false
             */
            force_sync: boolean;
        };
        /**
         * ScenarioGatewayIpSyncResponse
         * @description scenario-gateway 동기화 응답 모델
         */
        ScenarioGatewayIpSyncResponse: {
            /**
             * Success
             * @description 동기화 성공 여부
             */
            success: boolean;
            /**
             * Message
             * @description 동기화 결과 메시지
             */
            message: string;
            /**
             * Synced Count
             * @description 동기화된 IP 개수
             */
            synced_count: number;
            /**
             * Sync Time
             * Format: date-time
             * @description 동기화 시간
             */
            sync_time: string;
        };
        /**
         * ScenarioGatewayIpUpdate
         * @description scenario-gateway IP 화이트리스트 수정 요청 모델
         */
        ScenarioGatewayIpUpdate: {
            /**
             * Ip Address
             * @description 허용할 IP 주소 (IPv4/IPv6)
             */
            ip_address?: string | null;
            /**
             * Description
             * @description IP 주소에 대한 설명
             */
            description?: string | null;
            /**
             * Is Active
             * @description 활성화 여부
             */
            is_active?: boolean | null;
        };
        /**
         * TokenResponse
         * @description JWT 토큰 응답을 위한 스키마 (access_token + refresh_token)
         * @example {
         *       "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "token_type": "bearer"
         *     }
         */
        TokenResponse: {
            /**
             * Access Token
             * @description JWT 액세스 토큰
             */
            access_token: string;
            /**
             * Refresh Token
             * @description JWT 리프레쉬 토큰
             */
            refresh_token: string;
            /**
             * Token Type
             * @description 토큰 타입 (기본값: bearer)
             * @default bearer
             */
            token_type: string;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Email
             * Format: email
             * @description 사용자 이메일 주소
             */
            email: string;
            /**
             * Password
             * @description 최소 8자 비밀번호
             */
            password: string;
            /**
             * Full Name
             * @description 사용자 이름
             */
            full_name?: string | null;
            /**
             * Phone
             * @description 사용자 전화번호
             */
            phone: string;
            /**
             * Preferences
             * @description 사용자 설정 (JSON)
             */
            preferences?: Record<string, never> | null;
            /**
             * Last Login
             * @description 마지막 로그인 시간
             */
            last_login?: string | null;
            /**
             * @description 계정 상태 (기본값: ACTIVE)
             * @default ACTIVE
             */
            status: components["schemas"]["UserStatus"];
        };
        /** UserGroupCreate */
        UserGroupCreate: {
            /** User Id */
            user_id: number;
            /** Group Id */
            group_id: number;
            /** Role Id */
            role_id?: number | null;
            /** @default ACTIVE */
            status: components["schemas"]["UserGroupStatusEnum"];
        };
        /** UserGroupResponse */
        UserGroupResponse: {
            /** User Id */
            user_id: number;
            /** Group Id */
            group_id: number;
            /** Role Id */
            role_id: number | null;
            status: components["schemas"]["UserGroupStatusEnum"];
            /**
             * Joined At
             * Format: date-time
             */
            joined_at: string;
        };
        /**
         * UserGroupStatusEnum
         * @enum {string}
         */
        UserGroupStatusEnum: "ACTIVE" | "INACTIVE" | "REMOVED";
        /**
         * UserGroupsInfo
         * @description 사용자 그룹 정보
         */
        UserGroupsInfo: {
            /**
             * Groups
             * @description 소속된 그룹들 (직접 소속 + 하위 그룹)
             * @default []
             */
            groups: components["schemas"]["GroupResponse"][];
        };
        /**
         * UserListResponse
         * @description 관리자 페이지 사용자 목록 응답
         */
        UserListResponse: {
            /**
             * Items
             * @description 사용자 목록
             */
            items: components["schemas"]["UserResponse"][];
            /**
             * Total
             * @description 전체 사용자 수
             */
            total: number;
            /**
             * Page
             * @description 현재 페이지
             */
            page: number;
            /**
             * Size
             * @description 페이지 크기
             */
            size: number;
            /**
             * Pages
             * @description 전체 페이지 수
             */
            pages: number;
        };
        /** UserResponse */
        UserResponse: {
            /**
             * Id
             * @description 사용자의 고유 ID
             */
            id: number;
            /**
             * Email
             * @description 사용자의 이메일 주소
             */
            email: string;
            /**
             * Full Name
             * @description 사용자의 전체 이름
             */
            full_name?: string | null;
            /**
             * Preferences
             * @description 사용자 설정 (JSON)
             */
            preferences?: Record<string, never> | null;
            /**
             * Phone
             * @description 사용자 전화번호
             */
            phone?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description 사용자 생성 시간
             */
            created_at: string;
            /**
             * Updated At
             * @description 마지막 업데이트 시간
             */
            updated_at?: string | null;
            /**
             * Status
             * @description 사용자 상태
             */
            status: string;
            /**
             * Last Login
             * @description 마지막 로그인 시간
             */
            last_login?: string | null;
            /**
             * Profile Image Url
             * @description 프로필 이미지 URL
             */
            profile_image_url?: string | null;
        };
        /**
         * UserResponseWithRoles
         * @description 역할 및 그룹 정보가 포함된 사용자 응답 모델
         */
        UserResponseWithRoles: {
            /**
             * Id
             * @description 사용자의 고유 ID
             */
            id: number;
            /**
             * Email
             * @description 사용자의 이메일 주소
             */
            email: string;
            /**
             * Full Name
             * @description 사용자의 전체 이름
             */
            full_name?: string | null;
            /**
             * Preferences
             * @description 사용자 설정 (JSON)
             */
            preferences?: Record<string, never> | null;
            /**
             * Phone
             * @description 사용자 전화번호
             */
            phone?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description 사용자 생성 시간
             */
            created_at: string;
            /**
             * Updated At
             * @description 마지막 업데이트 시간
             */
            updated_at?: string | null;
            /**
             * Status
             * @description 사용자 상태
             */
            status: string;
            /**
             * Last Login
             * @description 마지막 로그인 시간
             */
            last_login?: string | null;
            /**
             * Profile Image Url
             * @description 프로필 이미지 URL
             */
            profile_image_url?: string | null;
            /** @description 사용자 역할 정보 */
            roles: components["schemas"]["UserRoleInfo"];
            groups: components["schemas"]["UserGroupsInfo"];
            /**
             * Passport
             * @description 사용자 passport 정보 (JSON)
             */
            passport?: Record<string, never> | null;
        };
        /**
         * UserRoleInfo
         * @description 사용자 역할 정보 (RoleResponse DTO 활용)
         */
        UserRoleInfo: {
            /** @description 사용자 글로벌 역할 */
            global_role?: components["schemas"]["RoleResponse"] | null;
            /**
             * Group Roles
             * @description 소속 그룹의 역할들
             * @default []
             */
            group_roles: components["schemas"]["RoleResponse"][];
            /**
             * In Group Roles
             * @description 그룹 내 사용자 역할들
             * @default []
             */
            in_group_roles: components["schemas"]["RoleResponse"][];
            /**
             * Total Roles
             * @description 모든 역할 목록
             * @default []
             */
            total_roles: components["schemas"]["RoleResponse"][];
        };
        /**
         * UserStatus
         * @enum {string}
         */
        UserStatus: "ACTIVE" | "INACTIVE" | "SUSPENDED";
        /**
         * UserStatusUpdateRequest
         * @description 사용자 상태 변경 요청 모델
         */
        UserStatusUpdateRequest: {
            /**
             * User Id
             * @description 변경할 사용자의 ID
             */
            user_id: number;
            /** @description 변경할 사용자 상태 */
            status: components["schemas"]["UserStatus"];
        };
        /**
         * UserUpdateRequest
         * @description 일반 사용자용 정보 수정 요청
         */
        UserUpdateRequest: {
            /**
             * Full Name
             * @description 사용자의 이름
             */
            full_name?: string | null;
            /**
             * Email
             * @description 사용자의 이메일 주소
             */
            email?: string | null;
            /**
             * Preferences
             * @description 사용자 개인 설정 (JSON)
             */
            preferences?: Record<string, never> | null;
            /**
             * Phone
             * @description 사용자 전화번호
             */
            phone?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_user_api_v1_users_account__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register_user_api_v1_users_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_current_user_with_roles_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 사용자 정보 및 역할 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "id": 123,
                     *       "email": "user@example.com",
                     *       "full_name": "John Doe",
                     *       "phone": "010-1234-5678",
                     *       "created_at": "2024-01-01T00:00:00Z",
                     *       "updated_at": "2024-01-01T00:00:00Z",
                     *       "status": "ACTIVE",
                     *       "last_login": "2024-01-01T00:00:00Z",
                     *       "preferences": {
                     *         "theme": "dark"
                     *       },
                     *       "roles": {
                     *         "global_role": {
                     *           "id": 1,
                     *           "role_name": "ADMIN",
                     *           "description": "시스템 관리자",
                     *           "created_at": "2024-01-01T00:00:00Z"
                     *         },
                     *         "group_roles": [
                     *           {
                     *             "id": 100,
                     *             "role_name": "GROUP_ADMIN",
                     *             "description": "그룹 관리자",
                     *             "created_at": "2024-01-01T00:00:00Z"
                     *           }
                     *         ],
                     *         "in_group_roles": [
                     *           {
                     *             "id": 101,
                     *             "role_name": "MEMBER",
                     *             "description": "그룹 멤버",
                     *             "created_at": "2024-01-01T00:00:00Z"
                     *           }
                     *         ],
                     *         "total_roles": [
                     *           {
                     *             "id": 1,
                     *             "role_name": "ADMIN",
                     *             "description": "시스템 관리자",
                     *             "created_at": "2024-01-01T00:00:00Z"
                     *           }
                     *         ]
                     *       },
                     *       "groups": {
                     *         "groups": [
                     *           {
                     *             "id": 1,
                     *             "group_name": "개발팀",
                     *             "group_type": "TEAM",
                     *             "parent_group_id": 2,
                     *             "manager": 456,
                     *             "creator": 123,
                     *             "role_id": 5,
                     *             "created_at": "2024-01-01T00:00:00Z",
                     *             "updated_at": "2024-01-01T00:00:00Z"
                     *           },
                     *           {
                     *             "id": 3,
                     *             "group_name": "백엔드팀",
                     *             "group_type": "TEAM",
                     *             "parent_group_id": 1,
                     *             "manager": 789,
                     *             "creator": 123,
                     *             "role_id": 6,
                     *             "created_at": "2024-01-01T00:00:00Z",
                     *             "updated_at": "2024-01-01T00:00:00Z"
                     *           }
                     *         ]
                     *       },
                     *       "passport": {
                     *         "user_id": 123,
                     *         "global_role": {
                     *           "id": 1,
                     *           "name": "ADMIN",
                     *           "description": "시스템 관리자"
                     *         },
                     *         "role_permission": {
                     *           "1": {
                     *             "role_id": 1,
                     *             "permissions": [
                     *               "read",
                     *               "write",
                     *               "delete"
                     *             ]
                     *           }
                     *         }
                     *       }
                     *     }
                     */
                    "application/json": components["schemas"]["UserResponseWithRoles"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_current_user_api_v1_users_me_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_current_user_api_v1_users_me_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    change_password_api_v1_users_me_password_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_list_api_v1_users_admin_users_get: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    admin_create_user_api_v1_users_admin_user_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminUserCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    admin_update_user_info_endpoint_api_v1_users_admin_user_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminUserUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_user_status_endpoint_api_v1_users_admin_user_status_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserStatusUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_profile_image_api_v1_users_me_profile_image_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upload_profile_image_api_v1_users_me_profile_image_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_profile_image_api_v1_users_me_profile_image_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_profile_image_api_v1_users_me_profile_image_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_groups_api_v1_groups_get: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지당 항목 수 */
                size?: number;
                /** @description 회원 정보 포함 여부 */
                include_members?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_new_group_api_v1_groups_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_group_api_v1_groups__group_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_group_info_api_v1_groups__group_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_groups_api_v1_groups_users__user_id__groups_get: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지당 항목 수 */
                size?: number;
                /** @description 회원 정보 포함 여부 */
                include_members?: boolean;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_to_group_api_v1_groups_user_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserGroupCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroupResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_user_group_status_endpoint_api_v1_groups_update_user_status_put: {
        parameters: {
            query: {
                user_id: number;
                group_id: number;
                status: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupWithMembersResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_available_users_for_group_endpoint_api_v1_groups__group_id__available_users_get: {
        parameters: {
            query?: {
                /** @description 이메일 검색어 (최소 2자) */
                email?: string;
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 정렬 기준 (full_name, email, created_at) */
                sort?: string;
            };
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailableUsersListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_group_members_api_v1_groups__group_id__members_get: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지당 항목 수 */
                size?: number;
            };
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupsWithMembersResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_all_roles_api_v1_roles__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_new_role_api_v1_roles__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_role_by_id_api_v1_roles__role_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_existing_role_api_v1_roles__role_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_existing_role_api_v1_roles__role_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_all_privileges_api_v1_roles_privileges_all_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrivilegeResponse"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_privilege_by_id_api_v1_roles_privileges__privilege_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                privilege_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrivilegeResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_existing_privilege_api_v1_roles_privileges__privilege_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                privilege_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrivilegeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrivilegeResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_existing_privilege_api_v1_roles_privileges__privilege_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                privilege_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    check_user_privilege_api_api_v1_roles_user_check_privilege__privilege_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                privilege_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_new_privilege_api_v1_roles_privileges_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrivilegeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrivilegeResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assign_privilege_api_v1_roles__role_id__privileges__privilege_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
                privilege_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePrivilegeResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Role or Privilege not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Privilege already assigned to role */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_privileges_of_role_api_v1_roles__role_id__privileges_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrivilegeResponse"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    remove_privilege_from_role_api_api_v1_roles_remove_privilege_delete: {
        parameters: {
            query: {
                role_id: number;
                privilege_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assign_role_to_group_api_api_v1_roles_assign_role_to_group_post: {
        parameters: {
            query: {
                group_id: number;
                role_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRoleResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_roles_of_group_api_v1_roles_groups__group_id__roles_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    remove_role_from_group_api_api_v1_roles_groups__group_id__roles__role_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: number;
                role_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    login_user_api_v1_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description 로그인 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                     *       "token_type": "bearer"
                     *     }
                     */
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "detail": "Invalid email or password"
                     *     }
                     */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_access_token_api_v1_auth_refresh_post: {
        parameters: {
            query: {
                refresh_token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generate_api_key_jwt_api_v1_auth_generate_scenario_api_key_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeyGenerateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyGenerateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_api_keys_api_v1_auth_api_keys_get: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지 크기 (최대 100) */
                size?: number;
                /** @description 시나리오 ID 필터 */
                my_scenario_id?: number | null;
                /** @description 그룹 ID 필터 */
                group_id?: number | null;
                /** @description 활성 상태 필터 */
                is_active?: boolean | null;
                /** @description 만료 상태 필터 */
                is_expired?: boolean | null;
                /** @description 생성일 시작 범위 */
                created_from?: string | null;
                /** @description 생성일 종료 범위 */
                created_to?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_gateway_ips_api_v1_scenario_gateway_ips_get: {
        parameters: {
            query?: {
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 활성화 여부 필터 */
                is_active?: boolean | null;
                /** @description IP 주소 또는 설명 검색 */
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_scenario_gateway_ip_api_v1_scenario_gateway_ips_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioGatewayIpCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_gateway_ip_api_v1_scenario_gateway_ips__ip_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ip_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_scenario_gateway_ip_api_v1_scenario_gateway_ips__ip_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ip_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioGatewayIpUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_scenario_gateway_ip_api_v1_scenario_gateway_ips__ip_id__delete: {
        parameters: {
            query?: {
                /** @description 논리적 삭제 여부 */
                soft_delete?: boolean;
            };
            header?: never;
            path: {
                ip_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulk_create_scenario_gateway_ips_api_v1_scenario_gateway_ips_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioGatewayIpBulkCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpBulkResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_active_scenario_gateway_ips_api_v1_scenario_gateway_ips_active_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_gateway_ip_statistics_api_v1_scenario_gateway_ips_statistics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_scenario_gateway_ips_api_v1_admin_scenario_gateway_ips_get: {
        parameters: {
            query?: {
                /** @description 페이지 번호 */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 활성화 여부 필터 */
                is_active?: boolean | null;
                /** @description IP 주소, 설명 또는 사용자 검색 */
                search?: string | null;
                /** @description 특정 사용자 ID 필터 */
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_scenario_gateway_ip_admin_api_v1_admin_scenario_gateway_ips__ip_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ip_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_scenario_gateway_ip_admin_api_v1_admin_scenario_gateway_ips__ip_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ip_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioGatewayIpUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_scenario_gateway_ip_admin_api_v1_admin_scenario_gateway_ips__ip_id__delete: {
        parameters: {
            query?: {
                /** @description 논리적 삭제 여부 */
                soft_delete?: boolean;
            };
            header?: never;
            path: {
                ip_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_scenario_gateway_ip_for_user_api_v1_admin_scenario_gateway_ips_users__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioGatewayIpCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulk_create_scenario_gateway_ips_for_user_api_v1_admin_scenario_gateway_ips_users__user_id__bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioGatewayIpBulkCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpBulkResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_active_scenario_gateway_ips_api_v1_admin_scenario_gateway_ips_all_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_global_scenario_gateway_ip_statistics_api_v1_admin_scenario_gateway_ips_statistics_global_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    trigger_scenario_gateway_sync_api_v1_admin_scenario_gateway_ips_sync_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioGatewayIpSyncRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioGatewayIpSyncResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP whitelist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description IP address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dynamic_gateway_router_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                service: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dynamic_gateway_router_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                service: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dynamic_gateway_router_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                service: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dynamic_gateway_router_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                service: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dynamic_gateway_router_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                service: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_gateway_status_api_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
